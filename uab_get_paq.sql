DROP PACKAGE UAB_GET.PGET_GESTION
/

--
-- PGET_GESTION  (Package) 
--
CREATE OR REPLACE PACKAGE UAB_GET.PGET_GESTION AS
/******************************************************************************
   NAME:       GET_GESTION
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        23/03/2015      HENRRY       1. Created this package.
******************************************************************************/
PROCEDURE P_REGISTRAR_GENERO(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_GENERO         IN UAB_GET.TPAR_GENERO.ID_GENERO%TYPE,
I_DESCRIPCION       IN UAB_GET.TPAR_GENERO.DESCRIPCION%TYPE, 
I_APP_ID_USUARIO    IN UAB_GET.TPAR_GENERO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.TPAR_GENERO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.TPAR_GENERO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);

PROCEDURE P_REGISTRA_DOCUMENTO(
I_CREDENCIAL           IN  VARCHAR2,
I_ID_DOCUMENTO         IN UAB_GET.T_DOCUMENTO.ID_DOCUMENTO%TYPE,
I_ID_PERSONA           IN UAB_GET.T_DOCUMENTO.ID_PERSONA%TYPE, 
I_ID_TIPO_DOCUMENTO    IN UAB_GET.T_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
I_NUMERO_DOCUMENTO     IN UAB_GET.T_DOCUMENTO.NUMERO_DOCUMENTO%TYPE,
I_DESCRIPCION          IN UAB_GET.T_DOCUMENTO.DESCRIPCION%TYPE,
I_APP_ID_USUARIO       IN UAB_GET.T_DOCUMENTO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO           IN UAB_GET.T_DOCUMENTO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO       IN UAB_GET.T_DOCUMENTO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);

PROCEDURE P_REGISTRAR_PERSONA(
I_CREDENCIAL           IN  VARCHAR2,
I_ID_PERSONA           IN UAB_GET.T_PERSONA.ID_PERSONA%TYPE, 
I_ID_TIPO_PERSONA      IN UAB_GET.T_PERSONA.ID_TIPO_PERSONA%TYPE, 
I_ID_GENERO            IN UAB_GET.T_PERSONA.ID_GENERO%TYPE,
I_NOMBRE               IN UAB_GET.T_PERSONA.NOMBRE%TYPE,
I_AP_PATERNO           IN UAB_GET.T_PERSONA.AP_PATERNO%TYPE,
I_AP_MATERNO           IN UAB_GET.T_PERSONA.AP_MATERNO%TYPE,
I_FECHA_NACIMIENTO     IN UAB_GET.T_PERSONA.FECHA_NACIMIENTO%TYPE,
I_DIRECCION            IN UAB_GET.T_PERSONA.DIRECCION%TYPE,
I_EMAIL                IN UAB_GET.T_PERSONA.EMAIL%TYPE,
I_APP_ID_USUARIO       IN UAB_GET.T_PERSONA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO           IN UAB_GET.T_PERSONA.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO       IN UAB_GET.T_PERSONA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);

PROCEDURE P_REGISTRA_TPAR_PRECIO(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_PRECIO         IN UAB_GET.TPAR_PRECIO.ID_PRECIO%TYPE,
I_PRECIO            IN UAB_GET.TPAR_PRECIO.PRECIO%TYPE, 
I_COSTO             IN UAB_GET.TPAR_PRECIO.COSTO%TYPE, 
I_OBSERVACIONES      IN UAB_GET.TPAR_PRECIO.OBSERVACIONES%TYPE, 
I_APP_ID_USUARIO    IN UAB_GET.TPAR_PRECIO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.TPAR_PRECIO.AUD_ESTADO%TYPE,
I_AUD_USUARIO       IN UAB_GET.TPAR_PRECIO.AUD_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.TPAR_PRECIO.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.TPAR_PRECIO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);
PROCEDURE P_REGISTRAR_BOLETO(
I_CREDENCIAL          IN  VARCHAR2,
I_ID_BOLETO           IN UAB_GET.T_BOLETO.ID_BOLETO%TYPE,
I_ID_USUARIO          IN UAB_GET.T_BOLETO.ID_USUARIO%TYPE,
I_ID_RUTA             IN UAB_GET.T_BOLETO.ID_RUTA%TYPE,
I_ID_SUCURSAL         IN UAB_GET.T_BOLETO.ID_SUCURSAL%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_BOLETO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_BOLETO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_BOLETO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);
PROCEDURE P_REGISTRA_HORARIO(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_HORARIO        IN UAB_GET.T_HORARIO.ID_HORARIO%TYPE,
I_HORA              IN UAB_GET.T_HORARIO.HORA%TYPE,
I_APP_ID_USUARIO    IN UAB_GET.T_HORARIO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.T_HORARIO.AUD_ESTADO%TYPE,
I_AUD_USUARIO       IN UAB_GET.T_HORARIO.APP_ID_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.T_HORARIO.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.T_HORARIO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);
PROCEDURE P_REGISTRA_FLOTA(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_FLOTA          IN UAB_GET.T_FLOTA.ID_FLOTA%TYPE,
I_ID_TIPO_FLOTA     IN UAB_GET.T_FLOTA.ID_TIPO_FLOTA%TYPE,
I_COLOR             IN UAB_GET.T_FLOTA.COLOR%TYPE,
I_PLACA             IN UAB_GET.T_FLOTA.PLACA       %TYPE,
I_MODELO            IN UAB_GET.T_FLOTA.MODELO      %TYPE,
I_NRO_ASIENTOS      IN UAB_GET.T_FLOTA.NRO_ASIENTOS%TYPE,
I_APP_ID_USUARIO    IN UAB_GET.T_FLOTA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.T_FLOTA.AUD_ESTADO%TYPE,
I_AUD_USUARIO       IN UAB_GET.T_FLOTA.AUD_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.T_FLOTA.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.T_FLOTA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);


PROCEDURE P_REGISTRA_CIUDAD(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_CIUDAD         IN UAB_GET.T_CIUDAD.ID_CIUDAD%TYPE,
I_NOMBRE            IN UAB_GET.T_CIUDAD.NOMBRE%TYPE,
I_APP_ID_USUARIO    IN UAB_GET.T_CIUDAD.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.T_CIUDAD.AUD_ESTADO%TYPE,
I_AUD_USUARIO        IN UAB_GET.T_CIUDAD.AUD_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.T_CIUDAD.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.T_CIUDAD.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);
PROCEDURE P_REGISTRA_SUCURSAL(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_SUCURSAL         IN UAB_GET.TPAR_SUCURSAL.ID_SUCURSAL%TYPE,
I_NOMBRE              IN UAB_GET.TPAR_SUCURSAL.NOMBRE%TYPE,
I_TELEFONO            IN UAB_GET.TPAR_SUCURSAL.TELEFONO%TYPE,
I_DIRECCION           IN UAB_GET.TPAR_SUCURSAL.DIRECCION%TYPE,
I_APP_ID_USUARIO     IN UAB_GET.TPAR_SUCURSAL.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.TPAR_SUCURSAL.AUD_ESTADO%TYPE,
I_AUD_USUARIO         IN UAB_GET.TPAR_SUCURSAL.AUD_USUARIO%TYPE,
I_AUD_FECHA           IN UAB_GET.TPAR_SUCURSAL.AUD_FECHA%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.TPAR_SUCURSAL.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
); 

PROCEDURE P_REGISTRA_USUARIO(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_USUARIO           IN UAB_GET.T_USUARIO.ID_USUARIO%TYPE,
I_ID_PERSONA           IN UAB_GET.T_USUARIO.ID_PERSONA%TYPE,
I_ID_SUCURSAL          IN UAB_GET.T_USUARIO.ID_SUCURSAL%TYPE,
I_ID_TIPO_USUARIO      IN UAB_GET.T_USUARIO.ID_TIPO_USUARIO%TYPE,
I_CLAVE             IN UAB_GET.T_USUARIO.CLAVE%TYPE,
I_USUARIO                 IN UAB_GET.T_USUARIO.USUARIO%TYPE,
I_APP_ID_USUARIO       IN UAB_GET.T_USUARIO.APP_ID_USUARIO %TYPE,
I_AUD_ESTADO           IN UAB_GET.T_USUARIO.AUD_ESTADO%TYPE,
I_AUD_USUARIO          IN UAB_GET.T_USUARIO.AUD_USUARIO%TYPE,
I_AUD_FECHA            IN UAB_GET.T_USUARIO.AUD_FECHA%TYPE,
I_FECHA_REGISTRO       IN UAB_GET.T_USUARIO.FECHA_REGISTRO %TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);

PROCEDURE P_REGISTRAR_DETALLE_BOLETO(
I_CREDENCIAL          IN  VARCHAR2,
I_ID_DETALLE_BOLETO   IN UAB_GET.T_DETALLE_BOLETO.ID_DETALLE_BOLETO%TYPE,
I_ID_BOLETO           IN UAB_GET.T_DETALLE_BOLETO.ID_BOLETO%TYPE,
I_ID_ASIENTO          IN UAB_GET.T_DETALLE_BOLETO.ID_ASIENTO%TYPE,
I_ID_PERSONA          IN UAB_GET.T_DETALLE_BOLETO.ID_PERSONA%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_DETALLE_BOLETO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_DETALLE_BOLETO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_DETALLE_BOLETO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);

PROCEDURE P_REGISTRAR_ASIENTO(
I_CREDENCIAL          IN  VARCHAR2,

I_ID_ASIENTO          IN UAB_GET.T_ASIENTO.ID_ASIENTO%TYPE,
I_ID_TIPO_ASIENTO     IN UAB_GET.T_ASIENTO.ID_TIPO_ASIENTO%TYPE,
I_NUMERO              IN UAB_GET.T_ASIENTO.NUMERO%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_ASIENTO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_ASIENTO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_ASIENTO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);
PROCEDURE P_REGISTRAR_ASIENTO_RUTA(
I_CREDENCIAL          IN  VARCHAR2,

I_ID_ASIENTO_RUTA       IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO_RUTA%TYPE,
I_ID_RUTA               IN UAB_GET.T_ASIENTO_RUTA.ID_RUTA%TYPE,
I_ID_ASIENTO            IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO%TYPE,
I_ID_ESTADO_ASIENTO     IN UAB_GET.T_ASIENTO_RUTA.ID_ESTADO_ASIENTO%TYPE,
I_DESCRIPCION           IN UAB_GET.T_ASIENTO_RUTA.DESCRIPCION%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_ASIENTO_RUTA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_ASIENTO_RUTA.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_ASIENTO_RUTA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);

PROCEDURE P_REGISTRAR_RUTA(
I_CREDENCIAL          IN  VARCHAR2,
I_ID_RUTA           IN UAB_GET.T_RUTA.ID_RUTA%TYPE,
I_ID_CIUDAD_ORIGEN  IN UAB_GET.T_RUTA.ID_CIUDAD_ORIGEN%TYPE,
I_ID_CIUDAD_DESTINO IN UAB_GET.T_RUTA.ID_CIUDAD_DESTINO%TYPE,
I_ID_FLOTA          IN UAB_GET.T_RUTA.ID_FLOTA%TYPE,
I_ID_HORARIO        IN UAB_GET.T_RUTA.ID_HORARIO%TYPE,
I_ID_PRECIO         IN UAB_GET.T_RUTA.ID_PRECIO%TYPE,
I_ID_CONDUCTOR      IN UAB_GET.T_RUTA.ID_CONDUCTOR%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_RUTA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_RUTA.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_RUTA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
);
END PGET_GESTION;
/

DROP PACKAGE UAB_GET.PGET_LISTADOS
/

--
-- PGET_LISTADOS  (Package) 
--
CREATE OR REPLACE PACKAGE UAB_GET.PGET_LISTADOS AS
/******************************************************************************
   NAME:       PGET_LISTADOS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        23/03/2015      HENRRY       1. Created this package.
******************************************************************************/
PROCEDURE P_LISTAR_GENERO ( 
I_CREDENCIAL        IN  VARCHAR2,
I_ID_GENERO         IN UAB_GET.TPAR_GENERO.ID_GENERO%TYPE,
I_DESCRIPCION       IN UAB_GET.TPAR_GENERO.DESCRIPCION%TYPE, 
I_APP_ID_USUARIO    IN UAB_GET.TPAR_GENERO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.TPAR_GENERO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.TPAR_GENERO.FECHA_REGISTRO%TYPE,
O_LISTAR_GENERO  OUT SYS_REFCURSOR
);
PROCEDURE P_LISTAR_PERSONA ( 
    I_CREDENCIAL        IN VARCHAR2, 
    I_ID_PERSONA        IN UAB_GET.T_PERSONA.ID_PERSONA%TYPE,
    I_ID_TIPO_PERSONA   IN UAB_GET.T_PERSONA.ID_TIPO_PERSONA%TYPE,
    I_TIPO_PERSONA      IN UAB_GET.TPAR_TIPO_PERSONA.DESCRIPCION%TYPE,
    I_ID_GENERO         IN UAB_GET.T_PERSONA.ID_GENERO%TYPE,
    I_GENERO            IN UAB_GET.TPAR_GENERO.DESCRIPCION%TYPE,
    I_NOMBRE            IN UAB_GET.T_PERSONA.NOMBRE%TYPE,
    I_AP_PATERNO        IN UAB_GET.T_PERSONA.AP_PATERNO%TYPE,
    I_AP_MATERNO        IN UAB_GET.T_PERSONA.AP_MATERNO%TYPE,
    I_FECHA_NACIMIENTO  IN UAB_GET.T_PERSONA.FECHA_NACIMIENTO%TYPE,
    I_DIRECCION         IN UAB_GET.T_PERSONA.DIRECCION%TYPE,
    I_EMAIL             IN UAB_GET.T_PERSONA.EMAIL%TYPE,
    I_APP_ID_USUARIO    IN UAB_GET.T_PERSONA.APP_ID_USUARIO%TYPE,
    I_AUD_ESTADO        IN UAB_GET.T_PERSONA.AUD_ESTADO%TYPE,
    I_FECHA_REGISTRO    IN UAB_GET.T_PERSONA.FECHA_REGISTRO%TYPE,
      
  O_LISTAR_PERSONA  OUT SYS_REFCURSOR
  );
  
    PROCEDURE P_LISTAR_DOCUMENTO( 
    I_CREDENCIAL        IN VARCHAR2,
    I_ID_DOCUMENTO      IN UAB_GET.T_DOCUMENTO.ID_DOCUMENTO%TYPE,
    I_ID_PERSONA          IN UAB_GET.T_DOCUMENTO.ID_PERSONA%TYPE, 
    I_ID_TIPO_DOCUMENTO   IN UAB_GET.T_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
    I_TIPO_DOCUMENTO      IN UAB_GET.TPAR_TIPO_DOCUMENTO.DESCRIPCION%TYPE,
    I_NUMERO_DOCUMENTO    IN UAB_GET.T_DOCUMENTO.NUMERO_DOCUMENTO%TYPE,
    I_DESCRIPCION         IN UAB_GET.T_DOCUMENTO.DESCRIPCION%TYPE,
    I_APP_ID_USUARIO      IN UAB_GET.T_DOCUMENTO.APP_ID_USUARIO%TYPE,
    I_AUD_ESTADO          IN UAB_GET.T_DOCUMENTO.AUD_ESTADO%TYPE,
    I_FECHA_REGISTRO      IN UAB_GET.T_DOCUMENTO.FECHA_REGISTRO%TYPE,

    O_LISTAR_DOCUMENTO  OUT SYS_REFCURSOR
    ); 
 PROCEDURE P_LISTAR_BOLETO_COMPLETO(
 I_CREDENCIAL   IN VARCHAR2,
    I_ID_BOLETO          IN UAB_GET.T_BOLETO.ID_BOLETO%TYPE,
    I_ID_RUTA            IN UAB_GET.T_BOLETO.ID_RUTA%TYPE,   
    I_ID_USUARIO         IN UAB_GET.T_BOLETO.ID_USUARIO%TYPE,
    I_ID_SUCURSAL        IN UAB_GET.T_BOLETO.ID_SUCURSAL%TYPE,
    I_FECHA_REGISTRO        IN UAB_GET.T_BOLETO.FECHA_REGISTRO%TYPE,
    I_AUD_ESTADO         IN UAB_GET.T_BOLETO.AUD_ESTADO%TYPE,
    I_ID_DETALLE_BOLETO  IN UAB_GET.T_DETALLE_BOLETO.ID_DETALLE_BOLETO%TYPE,
    I_ID_ASIENTO         IN UAB_GET.T_DETALLE_BOLETO.ID_ASIENTO%TYPE,
    I_ID_PERSONA         IN UAB_GET.T_DETALLE_BOLETO.ID_PERSONA%TYPE,
    I_ID_TIPO_ASIENTO    IN UAB_GET.T_ASIENTO.ID_TIPO_ASIENTO%TYPE,
    I_NUMERO             IN UAB_GET.T_ASIENTO.NUMERO%TYPE,
    I_TIPO_ASIENTO        IN UAB_GET.TPAR_TIPO_ASIENTO.DESCRIPCION%TYPE,
 O_LISTAR_BOLETO_COMPLETO  OUT SYS_REFCURSOR          
 );   
PROCEDURE P_LISTAR_ASIENTO_COMPLETO(
 I_CREDENCIAL   IN VARCHAR2,
    I_ID_ASIENTO_RUTA      IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO_RUTA%TYPE,
   I_ID_RUTA               IN UAB_GET.T_ASIENTO_RUTA.ID_RUTA%TYPE,
   I_ID_ESTADO_ASIENTO     IN UAB_GET.T_ASIENTO_RUTA.ID_ESTADO_ASIENTO%TYPE,
   I_ASIENTO_RUTA          IN UAB_GET.T_ASIENTO_RUTA.DESCRIPCION%TYPE,
   I_AUD_ESTADO            IN UAB_GET.T_ASIENTO_RUTA.AUD_ESTADO%TYPE,
   I_FECHA_REGISTRO        IN UAB_GET.T_ASIENTO_RUTA.FECHA_REGISTRO%TYPE,
   I_ID_ASIENTO            IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO%TYPE,
   I_ESTADO_ASIENTO        IN UAB_GET.TPAR_ESTADO_ASIENTO.DESCRIPCION%TYPE,
   I_NUMERO                IN UAB_GET.T_ASIENTO.NUMERO%TYPE,
   I_TIPO_ASIENTO          IN UAB_GET.TPAR_TIPO_ASIENTO.DESCRIPCION%TYPE,
   I_ID_TIPO_ASIENTO       IN UAB_GET.T_ASIENTO.ID_TIPO_ASIENTO%TYPE,
 O_LISTAR_ASIENTO_COMPLETO  OUT SYS_REFCURSOR          
 ); 
 PROCEDURE P_LISTAR_RUTA_COMPLETO(
 I_CREDENCIAL   IN VARCHAR2,
I_ID_RUTA            IN UAB_GET.T_RUTA.ID_RUTA%TYPE,
I_ID_CIUDAD_ORIGEN   IN UAB_GET.T_RUTA.ID_CIUDAD_ORIGEN%TYPE,
I_ID_CIUDAD_DESTINO  IN UAB_GET.T_RUTA.ID_CIUDAD_DESTINO%TYPE,
I_ID_FLOTA           IN UAB_GET.T_RUTA.ID_FLOTA%TYPE,
I_ID_HORARIO         IN UAB_GET.T_RUTA.ID_HORARIO%TYPE,
I_ID_PRECIO          IN UAB_GET.T_RUTA.ID_PRECIO%TYPE,
I_ID_CONDUCTOR       IN UAB_GET.T_RUTA.ID_CONDUCTOR%TYPE,

I_PRECIO             IN UAB_GET.TPAR_PRECIO.PRECIO%TYPE,
I_HORA               IN UAB_GET.T_HORARIO.HORA%TYPE,
I_ID_TIPO_FLOTA      IN UAB_GET.T_FLOTA.ID_TIPO_FLOTA%TYPE,
I_PLACA              IN UAB_GET.T_FLOTA.PLACA%TYPE,
I_MODELO             IN UAB_GET.T_FLOTA.MODELO%TYPE,
I_NRO_ASIENTOS       IN UAB_GET.T_FLOTA.NRO_ASIENTOS%TYPE,
I_TIPO_FLOTA         IN UAB_GET.TPAR_TIPO_FLOTA.DESCRIPCION%TYPE,
I_AUD_ESTADO         IN UAB_GET.T_RUTA.AUD_ESTADO%TYPE,
 O_LISTAR_RUTA_COMPLETO  OUT SYS_REFCURSOR          
 ); 
 PROCEDURE P_LISTAR_CIUDAD ( 
I_CREDENCIAL        IN  VARCHAR2,
I_ID_CIUDAD         IN UAB_GET.T_CIUDAD.ID_CIUDAD%TYPE,
I_CIUDAD            IN UAB_GET.T_CIUDAD.NOMBRE%TYPE, 
I_AUD_ESTADO        IN UAB_GET.T_CIUDAD.AUD_ESTADO%TYPE,
O_LISTAR_CIUDAD  OUT SYS_REFCURSOR
);
END PGET_LISTADOS;
/

GRANT EXECUTE ON UAB_GET.PGET_GESTION TO APP_GESTION_UAB
/

GRANT EXECUTE ON UAB_GET.PGET_LISTADOS TO APP_GESTION_UAB
/
DROP PACKAGE BODY UAB_GET.PGET_GESTION
/

--
-- PGET_GESTION  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY UAB_GET.PGET_GESTION AS
/******************************************************************************
   NAME:       GET_GESTION
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        23/03/2015      HENRRY       1. Created this package body.
******************************************************************************/
ID_ERROR NUMBER(15); 
PROCEDURE P_REGISTRAR_GENERO(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_GENERO         IN UAB_GET.TPAR_GENERO.ID_GENERO%TYPE,
I_DESCRIPCION       IN UAB_GET.TPAR_GENERO.DESCRIPCION%TYPE, 
I_APP_ID_USUARIO    IN UAB_GET.TPAR_GENERO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.TPAR_GENERO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.TPAR_GENERO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO TPAR_GENERO PROC 
            USING 
            (
                SELECT 
                I_ID_GENERO       AS ID_GENERO,
                I_DESCRIPCION     AS DESCRIPCION,
                I_APP_ID_USUARIO  AS APP_ID_USUARIO,
                I_AUD_ESTADO      AS AUD_ESTADO,
                I_FECHA_REGISTRO  AS FECHA_REGISTRO 
                FROM DUAL) DAT 
            ON (PROC.ID_GENERO = DAT.ID_GENERO) 
        WHEN MATCHED THEN 
            UPDATE SET 
            PROC.DESCRIPCION    = DAT.DESCRIPCION,
            PROC.APP_ID_USUARIO = DAT.APP_ID_USUARIO,
            PROC.AUD_ESTADO     = DAT.AUD_ESTADO,
            PROC.FECHA_REGISTRO = DAT.FECHA_REGISTRO   
        WHEN NOT MATCHED THEN 
            INSERT (
                PROC.DESCRIPCION,
                PROC.APP_ID_USUARIO,
                PROC.FECHA_REGISTRO
            ) 
            VALUES (
                DAT.DESCRIPCION,
                DAT.APP_ID_USUARIO,
                DAT.FECHA_REGISTRO
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_GENERO=0 OR I_ID_GENERO is NULL THEN
                ultimo_id:=UAB_GET.TPAR_GENERO_ID_GENERO.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_GENERO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_GENERO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.'||SQLERRM END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRAR_GENERO;



PROCEDURE P_REGISTRA_DOCUMENTO(
I_CREDENCIAL           IN  VARCHAR2,
I_ID_DOCUMENTO         IN UAB_GET.T_DOCUMENTO.ID_DOCUMENTO%TYPE,
I_ID_PERSONA           IN UAB_GET.T_DOCUMENTO.ID_PERSONA%TYPE, 
I_ID_TIPO_DOCUMENTO    IN UAB_GET.T_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
I_NUMERO_DOCUMENTO     IN UAB_GET.T_DOCUMENTO.NUMERO_DOCUMENTO%TYPE,
I_DESCRIPCION          IN UAB_GET.T_DOCUMENTO.DESCRIPCION%TYPE,
I_APP_ID_USUARIO       IN UAB_GET.T_DOCUMENTO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO           IN UAB_GET.T_DOCUMENTO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO       IN UAB_GET.T_DOCUMENTO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_DOCUMENTO PROC 
            USING 
            (
                SELECT 
                I_ID_DOCUMENTO         AS ID_DOCUMENTO,
                I_ID_PERSONA           AS ID_PERSONA, 
                I_ID_TIPO_DOCUMENTO    AS ID_TIPO_DOCUMENTO,
                I_NUMERO_DOCUMENTO     AS NUMERO_DOCUMENTO,
                I_DESCRIPCION          AS DESCRIPCION,
                I_APP_ID_USUARIO       AS APP_ID_USUARIO,
                I_AUD_ESTADO           AS AUD_ESTADO,
                I_FECHA_REGISTRO       AS FECHA_REGISTRO

                FROM DUAL) DAT 
            ON (PROC.ID_DOCUMENTO = DAT.ID_DOCUMENTO) 
        WHEN MATCHED THEN 
            UPDATE SET 

                PROC.ID_PERSONA         = DAT.ID_PERSONA,  
                PROC.ID_TIPO_DOCUMENTO  = DAT.ID_TIPO_DOCUMENTO,  
                PROC.NUMERO_DOCUMENTO   = DAT.NUMERO_DOCUMENTO,  
                PROC.DESCRIPCION        = DAT.DESCRIPCION ,  
                PROC.APP_ID_USUARIO     = DAT.APP_ID_USUARIO,  
                PROC.AUD_ESTADO         = DAT.AUD_ESTADO,    
                PROC.FECHA_REGISTRO     = DAT.FECHA_REGISTRO       

        WHEN NOT MATCHED THEN 
            INSERT (
                PROC.ID_PERSONA         ,  
                PROC.ID_TIPO_DOCUMENTO  ,  
                PROC.NUMERO_DOCUMENTO,  
                PROC.DESCRIPCION        ,  
                PROC.APP_ID_USUARIO     ,  
                PROC.AUD_ESTADO         ,  
 
                PROC.FECHA_REGISTRO       
            ) 
            VALUES (
                DAT.ID_PERSONA         ,  
                DAT.ID_TIPO_DOCUMENTO  ,  
                DAT.NUMERO_DOCUMENTO,  
                DAT.DESCRIPCION        ,  
                DAT.APP_ID_USUARIO     ,  
                DAT.AUD_ESTADO         ,  
 
                DAT.FECHA_REGISTRO       
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_DOCUMENTO=0 OR I_ID_DOCUMENTO is NULL THEN
                ultimo_id:=UAB_GET.T_DOCUMENTO_ID_DOCUMENTO.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_DOCUMENTO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_DOCUMENTO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRA_DOCUMENTO;

PROCEDURE P_REGISTRA_TPAR_PRECIO(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_PRECIO         IN UAB_GET.TPAR_PRECIO.ID_PRECIO%TYPE,
I_PRECIO            IN UAB_GET.TPAR_PRECIO.PRECIO%TYPE, 
I_COSTO             IN UAB_GET.TPAR_PRECIO.COSTO%TYPE, 
I_OBSERVACIONES      IN UAB_GET.TPAR_PRECIO.OBSERVACIONES%TYPE, 
I_APP_ID_USUARIO    IN UAB_GET.TPAR_PRECIO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.TPAR_PRECIO.AUD_ESTADO%TYPE,
I_AUD_USUARIO       IN UAB_GET.TPAR_PRECIO.AUD_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.TPAR_PRECIO.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.TPAR_PRECIO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO TPAR_PRECIO PROC 
            USING 
            (
                SELECT 
                    I_ID_PRECIO      AS ID_PRECIO     ,
                    I_PRECIO         AS PRECIO        ,
                    I_COSTO          AS COSTO         ,
                    I_OBSERVACIONES   AS OBSERVACIONES  ,
                    I_APP_ID_USUARIO AS APP_ID_USUARIO,
                    I_AUD_ESTADO     AS AUD_ESTADO    ,
                    I_AUD_USUARIO    AS AUD_USUARIO   ,
                    I_AUD_FECHA      AS AUD_FECHA     ,
                    I_FECHA_REGISTRO AS FECHA_REGISTRO
                
                FROM DUAL) DAT 
            ON (PROC.ID_PRECIO = DAT.ID_PRECIO) 
        WHEN MATCHED THEN 
            UPDATE SET 

                    PROC.ID_PRECIO     =DAT.ID_PRECIO     , 
                    PROC.PRECIO        =DAT.PRECIO        , 
                    PROC.COSTO         =DAT.COSTO         , 
                    PROC.OBSERVACIONES  =DAT.OBSERVACIONES  , 
                    PROC.APP_ID_USUARIO=DAT.APP_ID_USUARIO, 
                    PROC.AUD_ESTADO    =DAT.AUD_ESTADO    , 
                    PROC.AUD_USUARIO   =DAT.AUD_USUARIO   , 
                    PROC.AUD_FECHA     =DAT.AUD_FECHA     , 
                    PROC.FECHA_REGISTRO =DAT.FECHA_REGISTRO                 

        WHEN NOT MATCHED THEN 
            INSERT (
                    PROC.ID_PRECIO     ,
                    PROC.PRECIO        ,
                    PROC.COSTO         ,
                    PROC.OBSERVACIONES  ,
                    PROC.APP_ID_USUARIO,
                    PROC.AUD_ESTADO    ,
                    PROC.AUD_USUARIO   ,
                    PROC.AUD_FECHA     ,
                    PROC.FECHA_REGISTRO

            ) 
            VALUES (
            
                    DAT.ID_PRECIO     ,
                    DAT.PRECIO        ,
                    DAT.COSTO         ,
                    DAT.OBSERVACIONES  ,
                    DAT.APP_ID_USUARIO,
                    DAT.AUD_ESTADO    ,
                    DAT.AUD_USUARIO   ,
                    DAT.AUD_FECHA     ,
                    DAT.FECHA_REGISTRO

            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_PRECIO=0 OR I_ID_PRECIO is NULL THEN
                ultimo_id:=UAB_GET.TPAR_PRECIO_ID_PRECIO.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_PRECIO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_PRECIO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRA_TPAR_PRECIO;
PROCEDURE P_REGISTRAR_PERSONA(
I_CREDENCIAL           IN  VARCHAR2,
I_ID_PERSONA           IN UAB_GET.T_PERSONA.ID_PERSONA%TYPE, 
I_ID_TIPO_PERSONA      IN UAB_GET.T_PERSONA.ID_TIPO_PERSONA%TYPE, 
I_ID_GENERO            IN UAB_GET.T_PERSONA.ID_GENERO%TYPE,
I_NOMBRE               IN UAB_GET.T_PERSONA.NOMBRE%TYPE,
I_AP_PATERNO           IN UAB_GET.T_PERSONA.AP_PATERNO%TYPE,
I_AP_MATERNO           IN UAB_GET.T_PERSONA.AP_MATERNO%TYPE,
I_FECHA_NACIMIENTO     IN UAB_GET.T_PERSONA.FECHA_NACIMIENTO%TYPE,
I_DIRECCION            IN UAB_GET.T_PERSONA.DIRECCION%TYPE,
I_EMAIL                IN UAB_GET.T_PERSONA.EMAIL%TYPE,
I_APP_ID_USUARIO       IN UAB_GET.T_PERSONA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO           IN UAB_GET.T_PERSONA.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO       IN UAB_GET.T_PERSONA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_PERSONA PROC 
            USING 
            (
                SELECT 
            I_ID_PERSONA         AS  ID_PERSONA, 
            I_ID_TIPO_PERSONA    AS  ID_TIPO_PERSONA, 
            I_ID_GENERO          AS  ID_GENERO,
            I_NOMBRE             AS  NOMBRE,
            I_AP_PATERNO         AS  AP_PATERNO,
            I_AP_MATERNO         AS  AP_MATERNO,
            I_FECHA_NACIMIENTO   AS  FECHA_NACIMIENTO,
            I_DIRECCION          AS  DIRECCION,
            I_EMAIL              AS  EMAIL,
            I_APP_ID_USUARIO     AS  APP_ID_USUARIO,
            I_AUD_ESTADO         AS  AUD_ESTADO,
            
            I_FECHA_REGISTRO     AS  FECHA_REGISTRO

                FROM DUAL) DAT 
            ON (PROC.ID_PERSONA = DAT.ID_PERSONA) 
        WHEN MATCHED THEN 
            UPDATE SET 
            PROC.ID_TIPO_PERSONA   =DAT.ID_TIPO_PERSONA, 
            PROC.ID_GENERO         =DAT.ID_GENERO,
            PROC.NOMBRE            =DAT.NOMBRE,
            PROC.AP_PATERNO        =DAT.AP_PATERNO,
            PROC.AP_MATERNO        =DAT.AP_MATERNO,
            PROC.FECHA_NACIMIENTO  =DAT.FECHA_NACIMIENTO,
            PROC.DIRECCION         =DAT.DIRECCION,
            PROC.EMAIL             =DAT.EMAIL,
            PROC.APP_ID_USUARIO    =DAT.APP_ID_USUARIO,
            PROC.AUD_ESTADO        =DAT.AUD_ESTADO,
            
            PROC.FECHA_REGISTRO    =DAT.FECHA_REGISTRO

        WHEN NOT MATCHED THEN 
            INSERT (
            PROC.ID_TIPO_PERSONA,
            PROC.ID_GENERO,
            PROC.NOMBRE,
            PROC.AP_PATERNO,
            PROC.AP_MATERNO,
            PROC.FECHA_NACIMIENTO,
            PROC.DIRECCION,
            PROC.EMAIL,
            PROC.APP_ID_USUARIO,
            PROC.AUD_ESTADO,
            PROC.FECHA_REGISTRO 

            ) 
            VALUES (  
            DAT.ID_TIPO_PERSONA   ,
            DAT.ID_GENERO  ,
            DAT.NOMBRE  ,
            DAT.AP_PATERNO  ,
            DAT.AP_MATERNO  ,
            DAT.FECHA_NACIMIENTO  ,
            DAT.DIRECCION  ,
            DAT.EMAIL  ,
            DAT.APP_ID_USUARIO  ,
            DAT.AUD_ESTADO  ,
            DAT.FECHA_REGISTRO 
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_PERSONA=0 OR I_ID_PERSONA is NULL THEN
                ultimo_id:=UAB_GET.T_PERSONA_ID_PERSONA.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_PERSONA;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_PERSONA AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_T_PERSONA%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' ||SQLERRM END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRAR_PERSONA;
PROCEDURE P_REGISTRAR_BOLETO(
I_CREDENCIAL          IN  VARCHAR2,
I_ID_BOLETO           IN UAB_GET.T_BOLETO.ID_BOLETO%TYPE,
I_ID_USUARIO          IN UAB_GET.T_BOLETO.ID_USUARIO%TYPE,
I_ID_RUTA             IN UAB_GET.T_BOLETO.ID_RUTA%TYPE,
I_ID_SUCURSAL         IN UAB_GET.T_BOLETO.ID_SUCURSAL%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_BOLETO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_BOLETO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_BOLETO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_BOLETO PROC 
            USING 
            (
                SELECT
                    I_ID_BOLETO      AS ID_BOLETO     ,
                    I_ID_USUARIO     AS ID_USUARIO    ,
                    I_ID_RUTA        AS ID_RUTA       ,
                    I_ID_SUCURSAL    AS ID_SUCURSAL   ,
                    I_APP_ID_USUARIO AS APP_ID_USUARIO,
                    I_AUD_ESTADO     AS AUD_ESTADO    ,
                    I_FECHA_REGISTRO AS FECHA_REGISTRO                

                FROM DUAL) DAT 
            ON (PROC.ID_BOLETO = DAT.ID_BOLETO) 
        WHEN MATCHED THEN 
            UPDATE SET 
                ID_USUARIO    =DAT.ID_USUARIO    ,
                ID_RUTA       =DAT.ID_RUTA       ,
                ID_SUCURSAL   =DAT.ID_SUCURSAL   ,
                APP_ID_USUARIO=DAT.APP_ID_USUARIO,
                AUD_ESTADO    =DAT.AUD_ESTADO    ,
                FECHA_REGISTRO=DAT.FECHA_REGISTRO
        WHEN NOT MATCHED THEN 
            INSERT (
                    PROC.ID_USUARIO,
                    PROC.ID_RUTA,
                    PROC.ID_SUCURSAL,
                    PROC.APP_ID_USUARIO,
                    PROC.AUD_ESTADO,
                    PROC.FECHA_REGISTRO
          
            ) 
            VALUES (                    
                    DAT.ID_USUARIO,
                    DAT.ID_RUTA,
                    DAT.ID_SUCURSAL,
                    DAT.APP_ID_USUARIO,
                    DAT.AUD_ESTADO,
                    DAT.FECHA_REGISTRO
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_BOLETO=0 OR I_ID_BOLETO is NULL THEN
                ultimo_id:=UAB_GET.T_BOLETO_ID_BOLETO.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_BOLETO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_BOLETO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_T_BOLETO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' ||SQLERRM END;
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRAR_BOLETO;

PROCEDURE P_REGISTRA_HORARIO(
I_CREDENCIAL        IN  VARCHAR2,

I_ID_HORARIO        IN UAB_GET.T_HORARIO.ID_HORARIO%TYPE,
I_HORA              IN UAB_GET.T_HORARIO.HORA%TYPE,
I_APP_ID_USUARIO    IN UAB_GET.T_HORARIO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.T_HORARIO.AUD_ESTADO%TYPE,
I_AUD_USUARIO       IN UAB_GET.T_HORARIO.APP_ID_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.T_HORARIO.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.T_HORARIO.FECHA_REGISTRO%TYPE,

O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_HORARIO PROC 
            USING 
            (
                SELECT 
                I_ID_HORARIO      AS   ID_HORARIO     ,
                I_HORA            AS   HORA           ,
                I_APP_ID_USUARIO  AS   APP_ID_USUARIO ,
                I_AUD_ESTADO      AS   AUD_ESTADO     ,
                I_AUD_USUARIO     AS   AUD_USUARIO    ,
                I_AUD_FECHA       AS   AUD_FECHA      ,
                I_FECHA_REGISTRO  AS   FECHA_REGISTRO 

                
                FROM DUAL) DAT 
            ON (PROC.ID_HORARIO = DAT.ID_HORARIO) 
        WHEN MATCHED THEN 
            UPDATE SET 

                PROC.ID_HORARIO     =DAT.ID_HORARIO     ,
                PROC.HORA           =DAT.HORA           ,
                PROC.APP_ID_USUARIO =DAT.APP_ID_USUARIO ,
                PROC.AUD_ESTADO     =DAT.AUD_ESTADO     ,
                PROC.AUD_USUARIO    =DAT.AUD_USUARIO    ,
                PROC.AUD_FECHA      =DAT.AUD_FECHA      ,
                PROC.FECHA_REGISTRO =DAT.FECHA_REGISTRO 

        WHEN NOT MATCHED THEN 
            INSERT (
                PROC.ID_HORARIO    , 
                PROC.HORA          , 
                PROC.APP_ID_USUARIO, 
                PROC.AUD_ESTADO    , 
                PROC.AUD_USUARIO   , 
                PROC.AUD_FECHA     , 
                PROC.FECHA_REGISTRO             

            ) 
            VALUES (
                DAT.ID_HORARIO     ,
                DAT.HORA           ,
                DAT.APP_ID_USUARIO ,
                DAT.AUD_ESTADO     ,
                DAT.AUD_USUARIO    ,
                DAT.AUD_FECHA      ,
                DAT.FECHA_REGISTRO 
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_HORARIO=0 OR I_ID_HORARIO is NULL THEN
                ultimo_id:=UAB_GET.T_HORARIO_ID_HORARIO.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_HORARIO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_HORARIO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRA_HORARIO;

PROCEDURE P_REGISTRA_FLOTA(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_FLOTA          IN UAB_GET.T_FLOTA.ID_FLOTA%TYPE,
I_ID_TIPO_FLOTA     IN UAB_GET.T_FLOTA.ID_TIPO_FLOTA%TYPE,
I_COLOR             IN UAB_GET.T_FLOTA.COLOR%TYPE,
I_PLACA             IN UAB_GET.T_FLOTA.PLACA       %TYPE,
I_MODELO            IN UAB_GET.T_FLOTA.MODELO      %TYPE,
I_NRO_ASIENTOS      IN UAB_GET.T_FLOTA.NRO_ASIENTOS%TYPE,
I_APP_ID_USUARIO    IN UAB_GET.T_FLOTA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.T_FLOTA.AUD_ESTADO%TYPE,
I_AUD_USUARIO       IN UAB_GET.T_FLOTA.AUD_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.T_FLOTA.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.T_FLOTA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_FLOTA PROC 
            USING 
            (
                SELECT 
                    I_ID_FLOTA       AS ID_FLOTA      ,
                    I_ID_TIPO_FLOTA  AS ID_TIPO_FLOTA ,
                    I_COLOR          AS COLOR         ,
                    I_PLACA          AS PLACA         ,
                    I_MODELO         AS MODELO        ,
                    I_NRO_ASIENTOS   AS NRO_ASIENTOS  ,
                    I_APP_ID_USUARIO AS APP_ID_USUARIO,
                    I_AUD_ESTADO     AS AUD_ESTADO    ,
                    I_AUD_USUARIO    AS AUD_USUARIO   ,
                    I_AUD_FECHA      AS AUD_FECHA     ,
                    I_FECHA_REGISTRO AS FECHA_REGISTRO
                                    
                
                FROM DUAL) DAT 
            ON (PROC.ID_FLOTA = DAT.ID_FLOTA) 
        WHEN MATCHED THEN 
            UPDATE SET 
                    PROC.ID_FLOTA      =DAT.ID_FLOTA      ,
                    PROC.ID_TIPO_FLOTA =DAT.ID_TIPO_FLOTA ,
                    PROC.COLOR         =DAT.COLOR         ,
                    PROC.PLACA         =DAT.PLACA         ,
                    PROC.MODELO        =DAT.MODELO        ,
                    PROC.NRO_ASIENTOS  =DAT.NRO_ASIENTOS  ,
                    PROC.APP_ID_USUARIO=DAT.APP_ID_USUARIO,
                    PROC.AUD_ESTADO    =DAT.AUD_ESTADO    ,
                    PROC.AUD_USUARIO   =DAT.AUD_USUARIO   ,
                    PROC.AUD_FECHA     =DAT.AUD_FECHA     ,
                    PROC.FECHA_REGISTRO=DAT.FECHA_REGISTRO
            
        WHEN NOT MATCHED THEN 
            INSERT (

                    PROC.ID_FLOTA      ,
                    PROC.ID_TIPO_FLOTA ,
                    PROC.COLOR         ,
                    PROC.PLACA         ,
                    PROC.MODELO        ,
                    PROC.NRO_ASIENTOS  ,
                    PROC.APP_ID_USUARIO,
                    PROC.AUD_ESTADO    ,
                    PROC.AUD_USUARIO   ,
                    PROC.AUD_FECHA     ,
                    PROC.FECHA_REGISTRO            
         
            ) 
            VALUES (
                    DAT.ID_FLOTA      ,
                    DAT.ID_TIPO_FLOTA ,
                    DAT.COLOR         ,
                    DAT.PLACA         ,
                    DAT.MODELO        ,
                    DAT.NRO_ASIENTOS  ,
                    DAT.APP_ID_USUARIO,
                    DAT.AUD_ESTADO    ,
                    DAT.AUD_USUARIO   ,
                    DAT.AUD_FECHA     ,
                    DAT.FECHA_REGISTRO
                                
                
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_FLOTA=0 OR I_ID_FLOTA is NULL THEN
                ultimo_id:=UAB_GET.T_FLOTA_ID_FLOTA.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_FLOTA;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_FLOTA AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRA_FLOTA;
PROCEDURE P_REGISTRA_CIUDAD(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_CIUDAD         IN UAB_GET.T_CIUDAD.ID_CIUDAD%TYPE,
I_NOMBRE            IN UAB_GET.T_CIUDAD.NOMBRE%TYPE,
I_APP_ID_USUARIO    IN UAB_GET.T_CIUDAD.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.T_CIUDAD.AUD_ESTADO%TYPE,
I_AUD_USUARIO        IN UAB_GET.T_CIUDAD.AUD_USUARIO%TYPE,
I_AUD_FECHA         IN UAB_GET.T_CIUDAD.AUD_FECHA%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.T_CIUDAD.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_CIUDAD PROC 
            USING 
            (
                SELECT 
                I_ID_CIUDAD      AS ID_CIUDAD     ,
                I_NOMBRE         AS NOMBRE        ,
                I_APP_ID_USUARIO AS APP_ID_USUARIO,
                I_AUD_ESTADO     AS AUD_ESTADO    ,
                I_AUD_USUARIO    AS AUD_USUARIO   ,
                I_AUD_FECHA      AS AUD_FECHA     ,
                I_FECHA_REGISTRO AS FECHA_REGISTRO
                
                FROM DUAL) DAT 
            ON (PROC.ID_CIUDAD = DAT.ID_CIUDAD) 
        WHEN MATCHED THEN 
            UPDATE SET 
            PROC.ID_CIUDAD      = DAT.ID_CIUDAD     ,
            PROC.NOMBRE         = DAT.NOMBRE        ,
            PROC.APP_ID_USUARIO = DAT.APP_ID_USUARIO,
            PROC.AUD_ESTADO     = DAT.AUD_ESTADO    ,
            PROC.AUD_USUARIO    = DAT.AUD_USUARIO   ,
            PROC.AUD_FECHA      = DAT.AUD_FECHA     ,
            PROC.FECHA_REGISTRO = DAT.FECHA_REGISTRO
            
        WHEN NOT MATCHED THEN 
            INSERT (
                PROC.ID_CIUDAD     ,
                PROC.NOMBRE        ,
                PROC.APP_ID_USUARIO,
                PROC.AUD_ESTADO    ,
                PROC.AUD_USUARIO   ,
                PROC.AUD_FECHA     ,
                PROC.FECHA_REGISTRO
            ) 
            VALUES (
                DAT.ID_CIUDAD     ,
                DAT.NOMBRE        ,
                DAT.APP_ID_USUARIO,
                DAT.AUD_ESTADO    ,
                DAT.AUD_USUARIO   ,
                DAT.AUD_FECHA     ,
                DAT.FECHA_REGISTRO    
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_CIUDAD=0 OR I_ID_CIUDAD is NULL THEN
                ultimo_id:=UAB_GET.T_CIUDAD_ID_CIUDAD.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_CIUDAD;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_CIUDAD AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRA_CIUDAD;
PROCEDURE P_REGISTRA_SUCURSAL(
I_CREDENCIAL        IN  VARCHAR2,
I_ID_SUCURSAL         IN UAB_GET.TPAR_SUCURSAL.ID_SUCURSAL%TYPE,
I_NOMBRE              IN UAB_GET.TPAR_SUCURSAL.NOMBRE%TYPE,
I_TELEFONO            IN UAB_GET.TPAR_SUCURSAL.TELEFONO%TYPE,
I_DIRECCION           IN UAB_GET.TPAR_SUCURSAL.DIRECCION%TYPE,
I_APP_ID_USUARIO     IN UAB_GET.TPAR_SUCURSAL.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.TPAR_SUCURSAL.AUD_ESTADO%TYPE,
I_AUD_USUARIO         IN UAB_GET.TPAR_SUCURSAL.AUD_USUARIO%TYPE,
I_AUD_FECHA           IN UAB_GET.TPAR_SUCURSAL.AUD_FECHA%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.TPAR_SUCURSAL.FECHA_REGISTRO%TYPE,
    O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO TPAR_SUCURSAL PROC 
            USING 
            (
                SELECT 
                I_ID_SUCURSAL    AS ID_SUCURSAL   ,
                I_NOMBRE         AS NOMBRE        ,
                I_TELEFONO       AS TELEFONO      ,
                I_DIRECCION      AS DIRECCION     ,
                I_APP_ID_USUARIO AS APP_ID_USUARIO,
                I_AUD_ESTADO     AS AUD_ESTADO    ,
                I_AUD_USUARIO    AS AUD_USUARIO   ,
                I_AUD_FECHA      AS AUD_FECHA     ,
                I_FECHA_REGISTRO AS FECHA_REGISTRO


                FROM DUAL) DAT 
            ON (PROC.ID_SUCURSAL = DAT.ID_SUCURSAL) 
           WHEN MATCHED THEN 
            UPDATE SET 
            PROC.ID_SUCURSAL   =DAT.ID_SUCURSAL   ,
            PROC.NOMBRE        =DAT.NOMBRE        ,
            PROC.TELEFONO      =DAT.TELEFONO      ,
            PROC.DIRECCION     =DAT.DIRECCION     ,
            PROC.APP_ID_USUARIO=DAT.APP_ID_USUARIO,
            PROC.AUD_ESTADO    =DAT.AUD_ESTADO    ,
            PROC.AUD_USUARIO   =DAT.AUD_USUARIO   ,
            PROC.AUD_FECHA     =DAT.AUD_FECHA     ,
            PROC.FECHA_REGISTRO=DAT.FECHA_REGISTRO
                            

        WHEN NOT MATCHED THEN 
            INSERT (
        PROC.ID_SUCURSAL ,
        PROC.NOMBRE              ,
        PROC.TELEFONO           ,
        PROC.DIRECCION       ,
        PROC.APP_ID_USUARIO,
        PROC.AUD_ESTADO       ,
        PROC.AUD_USUARIO    ,
        PROC.AUD_FECHA   ,
        PROC.FECHA_REGISTRO
                        
                
            ) 
            VALUES (
        DAT.ID_SUCURSAL,
        DAT.NOMBRE,
        DAT.TELEFONO,
        DAT.DIRECCION,
        DAT.APP_ID_USUARIO,
        DAT.AUD_ESTADO,
        DAT.AUD_USUARIO,
        DAT.AUD_FECHA,
        DAT.FECHA_REGISTRO         
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_SUCURSAL=0 OR I_ID_SUCURSAL is NULL THEN
                ultimo_id:=UAB_GET.TPAR_SUCURSAL_ID_SUCURSAL.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_SUCURSAL;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_SUCURSAL AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRA_SUCURSAL;

PROCEDURE P_REGISTRA_USUARIO(
I_CREDENCIAL        IN  VARCHAR2,
    I_ID_USUARIO           IN UAB_GET.T_USUARIO.ID_USUARIO%TYPE,
    I_ID_PERSONA           IN UAB_GET.T_USUARIO.ID_PERSONA%TYPE,
    I_ID_SUCURSAL          IN UAB_GET.T_USUARIO.ID_SUCURSAL%TYPE,
    I_ID_TIPO_USUARIO      IN UAB_GET.T_USUARIO.ID_TIPO_USUARIO%TYPE,
    I_CLAVE                IN UAB_GET.T_USUARIO.CLAVE%TYPE,
    I_USUARIO              IN UAB_GET.T_USUARIO.USUARIO%TYPE,
    I_APP_ID_USUARIO       IN UAB_GET.T_USUARIO.APP_ID_USUARIO %TYPE,
    I_AUD_ESTADO           IN UAB_GET.T_USUARIO.AUD_ESTADO%TYPE,
    I_AUD_USUARIO          IN UAB_GET.T_USUARIO.AUD_USUARIO%TYPE,
    I_AUD_FECHA            IN UAB_GET.T_USUARIO.AUD_FECHA%TYPE,
    I_FECHA_REGISTRO       IN UAB_GET.T_USUARIO.FECHA_REGISTRO %TYPE,
    O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_USUARIO PROC 
            USING 
            (
                SELECT 

                I_ID_USUARIO       AS ID_USUARIO     ,               
                I_ID_PERSONA       AS ID_PERSONA     ,               
                I_ID_SUCURSAL      AS ID_SUCURSAL    ,               
                I_ID_TIPO_USUARIO  AS ID_TIPO_USUARIO,               
                I_CLAVE            AS CLAVE       ,               
                I_USUARIO          AS USUARIO         ,               
                I_APP_ID_USUARIO   AS APP_ID_USUARIO ,               
                I_AUD_ESTADO       AS AUD_ESTADO     ,               
                I_AUD_USUARIO      AS AUD_USUARIO    ,               
                I_AUD_FECHA        AS AUD_FECHA      ,               
                I_FECHA_REGISTRO   AS FECHA_REGISTRO
                
                FROM DUAL) DAT 
            ON (PROC.ID_USUARIO = DAT.ID_USUARIO) 
        WHEN MATCHED THEN 
            UPDATE SET 
                PROC.ID_USUARIO      =DAT.ID_USUARIO     ,
                PROC.ID_PERSONA      =DAT.ID_PERSONA     ,
                PROC.ID_SUCURSAL     =DAT.ID_SUCURSAL    ,
                PROC.ID_TIPO_USUARIO =DAT.ID_TIPO_USUARIO,
                PROC.CLAVE           =DAT.CLAVE       ,
                PROC.USUARIO          =DAT.USUARIO     ,
                PROC.APP_ID_USUARIO  =DAT.APP_ID_USUARIO ,
                PROC.AUD_ESTADO      =DAT.AUD_ESTADO     ,
                PROC.AUD_USUARIO     =DAT.AUD_USUARIO    ,
                PROC.AUD_FECHA       =DAT.AUD_FECHA      ,
                PROC.FECHA_REGISTRO  =DAT.FECHA_REGISTRO 

        WHEN NOT MATCHED THEN 
            INSERT (
                PROC.ID_USUARIO     ,
                PROC.ID_PERSONA     ,
                PROC.ID_SUCURSAL    ,
                PROC.ID_TIPO_USUARIO,
                PROC.CLAVE       ,
                PROC.USUARIO           ,
                PROC.APP_ID_USUARIO ,
                PROC.AUD_ESTADO     ,
                PROC.AUD_USUARIO    ,
                PROC.AUD_FECHA      ,
                PROC.FECHA_REGISTRO 
            ) 
            VALUES (

                DAT.ID_USUARIO     ,
                DAT.ID_PERSONA     ,
                DAT.ID_SUCURSAL    ,
                DAT.ID_TIPO_USUARIO,
                DAT.CLAVE       ,
                DAT.USUARIO           ,
                DAT.APP_ID_USUARIO ,
                DAT.AUD_ESTADO     ,
                DAT.AUD_USUARIO    ,
                DAT.AUD_FECHA      ,
                DAT.FECHA_REGISTRO             
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_USUARIO=0 OR I_ID_USUARIO is NULL THEN
                ultimo_id:=UAB_GET.T_USUARIO_ID_USUARIO.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_USUARIO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_USUARIO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_CASO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' END; 
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRA_USUARIO;

PROCEDURE P_REGISTRAR_DETALLE_BOLETO(
I_CREDENCIAL          IN  VARCHAR2,
I_ID_DETALLE_BOLETO   IN UAB_GET.T_DETALLE_BOLETO.ID_DETALLE_BOLETO%TYPE,
I_ID_BOLETO           IN UAB_GET.T_DETALLE_BOLETO.ID_BOLETO%TYPE,
I_ID_ASIENTO          IN UAB_GET.T_DETALLE_BOLETO.ID_ASIENTO%TYPE,
I_ID_PERSONA          IN UAB_GET.T_DETALLE_BOLETO.ID_PERSONA%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_DETALLE_BOLETO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_DETALLE_BOLETO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_DETALLE_BOLETO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_DETALLE_BOLETO PROC 
            USING 
            (
                SELECT
                    I_ID_DETALLE_BOLETO AS ID_DETALLE_BOLETO,
                    I_ID_BOLETO         AS ID_BOLETO,
                    I_ID_ASIENTO        AS ID_ASIENTO,
                    I_ID_PERSONA        AS ID_PERSONA,
                    I_APP_ID_USUARIO    AS APP_ID_USUARIO,
                    I_AUD_ESTADO        AS AUD_ESTADO,
                    I_FECHA_REGISTRO    AS FECHA_REGISTRO                

                FROM DUAL) DAT 
            ON (PROC.ID_DETALLE_BOLETO = DAT.ID_DETALLE_BOLETO) 
        WHEN MATCHED THEN 
            UPDATE SET 
                ID_BOLETO       = DAT.ID_BOLETO,
                ID_ASIENTO      =DAT.ID_ASIENTO,
                ID_PERSONA       =DAT.ID_PERSONA,
                APP_ID_USUARIO  =DAT.APP_ID_USUARIO,
                AUD_ESTADO      =DAT.AUD_ESTADO,
                FECHA_REGISTRO  =DAT.FECHA_REGISTRO
        WHEN NOT MATCHED THEN 
            INSERT (
                    PROC.ID_BOLETO,
                    PROC.ID_ASIENTO,
                    PROC.ID_PERSONA,
                    PROC.APP_ID_USUARIO,
                    PROC.AUD_ESTADO,
                    PROC.FECHA_REGISTRO
          
            ) 
            VALUES (                    
                    DAT.ID_BOLETO,
                    DAT.ID_ASIENTO,
                    DAT.ID_PERSONA,
                    DAT.APP_ID_USUARIO,
                    DAT.AUD_ESTADO,
                    DAT.FECHA_REGISTRO
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_DETALLE_BOLETO=0 OR I_ID_DETALLE_BOLETO is NULL THEN
                ultimo_id:=UAB_GET.T_DETALLE_BOL_ID_DETALLE_B.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_DETALLE_BOLETO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_DETALLE_BOLETO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_T_DETALLE_BOLETO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' ||SQLERRM END;
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRAR_DETALLE_BOLETO;

PROCEDURE P_REGISTRAR_ASIENTO(
I_CREDENCIAL          IN  VARCHAR2,

I_ID_ASIENTO          IN UAB_GET.T_ASIENTO.ID_ASIENTO%TYPE,
I_ID_TIPO_ASIENTO     IN UAB_GET.T_ASIENTO.ID_TIPO_ASIENTO%TYPE,
I_NUMERO              IN UAB_GET.T_ASIENTO.NUMERO%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_ASIENTO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_ASIENTO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_ASIENTO.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_ASIENTO PROC 
            USING 
            (
                SELECT
                    I_ID_ASIENTO        AS ID_ASIENTO,
                    I_ID_TIPO_ASIENTO   AS ID_TIPO_ASIENTO,
                    I_NUMERO            AS NUMERO,
                    I_APP_ID_USUARIO    AS APP_ID_USUARIO,
                    I_AUD_ESTADO        AS AUD_ESTADO,
                    I_FECHA_REGISTRO    AS FECHA_REGISTRO                

                FROM DUAL) DAT 
            ON (PROC.ID_ASIENTO = DAT.ID_ASIENTO) 
        WHEN MATCHED THEN 
            UPDATE SET 
                ID_TIPO_ASIENTO = DAT.ID_TIPO_ASIENTO,
                NUMERO          =DAT.NUMERO,
                APP_ID_USUARIO  =DAT.APP_ID_USUARIO,
                AUD_ESTADO      =DAT.AUD_ESTADO,
                FECHA_REGISTRO  =DAT.FECHA_REGISTRO
        WHEN NOT MATCHED THEN 
            INSERT (
                    PROC.ID_TIPO_ASIENTO,
                    PROC.NUMERO,
                    PROC.APP_ID_USUARIO,
                    PROC.AUD_ESTADO,
                    PROC.FECHA_REGISTRO
          
            ) 
            VALUES (                    
                    DAT.ID_TIPO_ASIENTO,
                    DAT.NUMERO,
                    DAT.APP_ID_USUARIO,
                    DAT.AUD_ESTADO,
                    DAT.FECHA_REGISTRO
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_ASIENTO=0 OR I_ID_ASIENTO is NULL THEN
                ultimo_id:=UAB_GET.T_ASIENTO_ID_ASIENTO.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_ASIENTO;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_ASIENTO AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_T_ASIENTO%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' ||SQLERRM END;
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRAR_ASIENTO;


PROCEDURE P_REGISTRAR_ASIENTO_RUTA(
I_CREDENCIAL          IN  VARCHAR2,

I_ID_ASIENTO_RUTA       IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO_RUTA%TYPE,
I_ID_RUTA               IN UAB_GET.T_ASIENTO_RUTA.ID_RUTA%TYPE,
I_ID_ASIENTO            IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO%TYPE,
I_ID_ESTADO_ASIENTO     IN UAB_GET.T_ASIENTO_RUTA.ID_ESTADO_ASIENTO%TYPE,
I_DESCRIPCION           IN UAB_GET.T_ASIENTO_RUTA.DESCRIPCION%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_ASIENTO_RUTA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_ASIENTO_RUTA.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_ASIENTO_RUTA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_ASIENTO_RUTA PROC 
            USING 
            (
                SELECT
                    I_ID_ASIENTO_RUTA   AS ID_ASIENTO_RUTA,
                    I_ID_RUTA           AS ID_RUTA,
                    I_ID_ASIENTO        AS ID_ASIENTO,
                    I_ID_ESTADO_ASIENTO AS ID_ESTADO_ASIENTO,
                    I_DESCRIPCION       AS DESCRIPCION,
                    I_APP_ID_USUARIO    AS APP_ID_USUARIO,
                    I_AUD_ESTADO        AS AUD_ESTADO,
                    I_FECHA_REGISTRO    AS FECHA_REGISTRO                

                FROM DUAL) DAT 
            ON (PROC.ID_ASIENTO_RUTA = DAT.ID_ASIENTO_RUTA) 
        WHEN MATCHED THEN 
            UPDATE SET 
                ID_RUTA             = DAT.ID_RUTA,
                ID_ASIENTO          = DAT.ID_ASIENTO,
                ID_ESTADO_ASIENTO   =DAT.ID_ESTADO_ASIENTO,
                DESCRIPCION     =DAT.DESCRIPCION,
                APP_ID_USUARIO  =DAT.APP_ID_USUARIO,
                AUD_ESTADO      =DAT.AUD_ESTADO,
                FECHA_REGISTRO  =DAT.FECHA_REGISTRO
        WHEN NOT MATCHED THEN 
            INSERT (
                    PROC.ID_RUTA,
                    PROC.ID_ASIENTO,
                    PROC.ID_ESTADO_ASIENTO,
                    PROC.DESCRIPCION,
                    PROC.APP_ID_USUARIO,
                    PROC.AUD_ESTADO,
                    PROC.FECHA_REGISTRO
          
            ) 
            VALUES (                    
                    DAT.ID_RUTA,
                    DAT.ID_ASIENTO,
                    DAT.ID_ESTADO_ASIENTO,
                    DAT.DESCRIPCION,
                    DAT.APP_ID_USUARIO,
                    DAT.AUD_ESTADO,
                    DAT.FECHA_REGISTRO
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_ASIENTO_RUTA=0 OR I_ID_ASIENTO_RUTA is NULL THEN
                ultimo_id:=UAB_GET.T_ASIENTO_RUT_ID_ASIENTO_R.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_ASIENTO_RUTA;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_ASIENTO_RUTA AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_T_ASIENTO_RUTA%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' ||SQLERRM END;
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRAR_ASIENTO_RUTA;

PROCEDURE P_REGISTRAR_RUTA(
I_CREDENCIAL          IN  VARCHAR2,
I_ID_RUTA           IN UAB_GET.T_RUTA.ID_RUTA%TYPE,
I_ID_CIUDAD_ORIGEN  IN UAB_GET.T_RUTA.ID_CIUDAD_ORIGEN%TYPE,
I_ID_CIUDAD_DESTINO IN UAB_GET.T_RUTA.ID_CIUDAD_DESTINO%TYPE,
I_ID_FLOTA          IN UAB_GET.T_RUTA.ID_FLOTA%TYPE,
I_ID_HORARIO        IN UAB_GET.T_RUTA.ID_HORARIO%TYPE,
I_ID_PRECIO         IN UAB_GET.T_RUTA.ID_PRECIO%TYPE,
I_ID_CONDUCTOR      IN UAB_GET.T_RUTA.ID_CONDUCTOR%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_RUTA.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_RUTA.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_RUTA.FECHA_REGISTRO%TYPE,
O_RESULTADO OUT SYS_REFCURSOR
)IS 
    VO_RESULTADO       NUMBER; 
    VO_MENSAJE_ERROR   VARCHAR2 (255); 
    V_VALIDA_LLAVE     NUMBER;
    ultimo_id          NUMBER;
     
BEGIN 
--IMPLEMENTAR UNA FUNCION V_VALIDA_LLAVE 
    SELECT 1 INTO V_VALIDA_LLAVE FROM DUAL;
    IF V_VALIDA_LLAVE = 1 THEN 
        MERGE INTO T_RUTA PROC 
            USING 
            (
                SELECT
                    I_ID_RUTA           AS ID_RUTA,
                    I_ID_CIUDAD_ORIGEN  AS ID_CIUDAD_ORIGEN,
                    I_ID_CIUDAD_DESTINO AS ID_CIUDAD_DESTINO,
                    I_ID_FLOTA          AS ID_FLOTA,
                    I_ID_HORARIO        AS ID_HORARIO,
                    I_ID_PRECIO         AS ID_PRECIO,
                    I_ID_CONDUCTOR      AS ID_CONDUCTOR,
                    I_APP_ID_USUARIO    AS APP_ID_USUARIO,
                    I_AUD_ESTADO        AS AUD_ESTADO,
                    I_FECHA_REGISTRO    AS FECHA_REGISTRO                

                FROM DUAL) DAT 
            ON (PROC.ID_RUTA = DAT.ID_RUTA) 
        WHEN MATCHED THEN 
            UPDATE SET 
                ID_CIUDAD_ORIGEN    = DAT.ID_CIUDAD_ORIGEN,
                ID_CIUDAD_DESTINO   =DAT.ID_CIUDAD_DESTINO,
                ID_FLOTA            =DAT.ID_FLOTA,
                ID_HORARIO          =DAT.ID_HORARIO,
                ID_PRECIO           =DAT.ID_PRECIO,
                ID_CONDUCTOR        =DAT.ID_CONDUCTOR,
                APP_ID_USUARIO  =DAT.APP_ID_USUARIO,
                AUD_ESTADO      =DAT.AUD_ESTADO,
                FECHA_REGISTRO  =DAT.FECHA_REGISTRO
        WHEN NOT MATCHED THEN 
            INSERT (
                    PROC.ID_CIUDAD_ORIGEN,
                    PROC.ID_CIUDAD_DESTINO,
                    PROC.ID_FLOTA,
                    PROC.ID_HORARIO,
                    PROC.ID_PRECIO,
                    PROC.ID_CONDUCTOR,
                    PROC.APP_ID_USUARIO,
                    PROC.AUD_ESTADO,
                    PROC.FECHA_REGISTRO
          
            ) 
            VALUES ( 
                    DAT.ID_CIUDAD_ORIGEN,
                    DAT.ID_CIUDAD_DESTINO,
                    DAT.ID_FLOTA,
                    DAT.ID_HORARIO,         
                    DAT.ID_PRECIO,
                    DAT.ID_CONDUCTOR,
                    DAT.APP_ID_USUARIO,
                    DAT.AUD_ESTADO,
                    DAT.FECHA_REGISTRO
            ); 
            VO_RESULTADO := 0; 
            VO_MENSAJE_ERROR := 'OK';
            
            IF I_ID_RUTA=0 OR I_ID_RUTA is NULL THEN
                ultimo_id:=UAB_GET.T_RUTA_ID_RUTA.CURRVAL;
            ELSE
                ultimo_id:=  I_ID_RUTA;
            END IF;
             
            OPEN O_RESULTADO FOR 
                SELECT ultimo_id AS "ID_TABLA", 
                VO_RESULTADO AS "RESULTADO", 
                VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
        COMMIT; 
    ELSE 
        VO_RESULTADO := -1; 
        VO_MENSAJE_ERROR := 'EL CERTIFICADO DE SEGURIDAD ES ERRONEO.'; 
        OPEN O_RESULTADO FOR 
            SELECT I_ID_RUTA AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
    END IF; 

EXCEPTION 
    WHEN OTHERS THEN 
    ROLLBACK;  
        VO_RESULTADO := -99; 
        VO_MENSAJE_ERROR := SQLERRM; 
        VO_MENSAJE_ERROR := CASE WHEN VO_MENSAJE_ERROR LIKE '%PK_T_RUTA%' 
    THEN 'EL INFORME YA FUE PROCESADO' 
    ELSE 'ERROR NO ESPERADO DE BASE DE DATOS: ' || ID_ERROR || ' CONSULTE CON EL ADMINISTRADOR.' ||SQLERRM END;
        OPEN O_RESULTADO FOR 
            SELECT -99999 AS "ID_TABLA", 
            VO_RESULTADO AS "RESULTADO", 
            VO_MENSAJE_ERROR AS "MENSAJE_ERROR" 
        FROM DUAL; 
END P_REGISTRAR_RUTA;

END PGET_GESTION;
/

DROP PACKAGE BODY UAB_GET.PGET_LISTADOS
/

--
-- PGET_LISTADOS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY UAB_GET.PGET_LISTADOS AS
/******************************************************************************
   NAME:       PGET_LISTADOS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        23/03/2015      HENRRY       1. Created this package body.
******************************************************************************/
PROCEDURE P_LISTAR_GENERO ( 
I_CREDENCIAL        IN  VARCHAR2,
I_ID_GENERO         IN UAB_GET.TPAR_GENERO.ID_GENERO%TYPE,
I_DESCRIPCION       IN UAB_GET.TPAR_GENERO.DESCRIPCION%TYPE, 
I_APP_ID_USUARIO    IN UAB_GET.TPAR_GENERO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO        IN UAB_GET.TPAR_GENERO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO    IN UAB_GET.TPAR_GENERO.FECHA_REGISTRO%TYPE,
O_LISTAR_GENERO  OUT SYS_REFCURSOR
) AS
BEGIN

OPEN O_LISTAR_GENERO FOR
    SELECT ID_GENERO, DESCRIPCION, APP_ID_USUARIO, AUD_ESTADO, FECHA_REGISTRO
    FROM UAB_GET.TPAR_GENERO PROC
    WHERE
    NVL(PROC.ID_GENERO,0) = CASE WHEN NVL(I_ID_GENERO,0) = 0 THEN
    NVL(PROC.ID_GENERO,0) ELSE NVL(I_ID_GENERO,0) END
    AND
    UPPER(PROC.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_DESCRIPCION),' ') = ' ' THEN
    UPPER(PROC.DESCRIPCION) ELSE '%'||UPPER(I_DESCRIPCION)||'%' END
    AND
    NVL(PROC.APP_ID_USUARIO,0) = CASE WHEN NVL(I_APP_ID_USUARIO,0) = 0 THEN
    NVL(PROC.APP_ID_USUARIO,0) ELSE NVL(I_APP_ID_USUARIO,0) END
    AND
    UPPER(PROC.FECHA_REGISTRO) LIKE CASE WHEN NVL(TRIM(I_FECHA_REGISTRO),' ') = ' ' THEN
    UPPER(PROC.FECHA_REGISTRO) ELSE '%'||UPPER(I_FECHA_REGISTRO)||'%' END
    AND
    NVL(PROC.AUD_ESTADO,0) = CASE WHEN NVL(I_AUD_ESTADO,0) = 0 THEN
    NVL(PROC.AUD_ESTADO,0) ELSE NVL(I_AUD_ESTADO,0) END;
    --AND PROC.AUD_ESTADO = I_AUD_ESTADO;
    END;
    
    
PROCEDURE P_LISTAR_PERSONA ( 
    I_CREDENCIAL        IN VARCHAR2, 
    I_ID_PERSONA        IN UAB_GET.T_PERSONA.ID_PERSONA%TYPE,
    I_ID_TIPO_PERSONA   IN UAB_GET.T_PERSONA.ID_TIPO_PERSONA%TYPE,
    I_TIPO_PERSONA      IN UAB_GET.TPAR_TIPO_PERSONA.DESCRIPCION%TYPE,
    I_ID_GENERO         IN UAB_GET.T_PERSONA.ID_GENERO%TYPE,
    I_GENERO            IN UAB_GET.TPAR_GENERO.DESCRIPCION%TYPE,
    I_NOMBRE            IN UAB_GET.T_PERSONA.NOMBRE%TYPE,
    I_AP_PATERNO        IN UAB_GET.T_PERSONA.AP_PATERNO%TYPE,
    I_AP_MATERNO        IN UAB_GET.T_PERSONA.AP_MATERNO%TYPE,
    I_FECHA_NACIMIENTO  IN UAB_GET.T_PERSONA.FECHA_NACIMIENTO%TYPE,
    I_DIRECCION         IN UAB_GET.T_PERSONA.DIRECCION%TYPE,
    I_EMAIL             IN UAB_GET.T_PERSONA.EMAIL%TYPE,
    I_APP_ID_USUARIO    IN UAB_GET.T_PERSONA.APP_ID_USUARIO%TYPE,
    I_AUD_ESTADO        IN UAB_GET.T_PERSONA.AUD_ESTADO%TYPE,
    I_FECHA_REGISTRO    IN UAB_GET.T_PERSONA.FECHA_REGISTRO%TYPE,
      
  O_LISTAR_PERSONA  OUT SYS_REFCURSOR
  ) AS
BEGIN

OPEN O_LISTAR_PERSONA FOR
    SELECT 
      PERS.ID_PERSONA,
      PERS.ID_TIPO_PERSONA,
      TIPE.DESCRIPCION TIPO_PERSONA,
      PERS.ID_GENERO,
      GENE.DESCRIPCION GENERO,
      PERS.NOMBRE,
      PERS.AP_PATERNO,
      PERS.AP_MATERNO,
      PERS.FECHA_NACIMIENTO,
      PERS.DIRECCION,
      PERS.EMAIL,
      PERS.APP_ID_USUARIO,
      PERS.AUD_ESTADO,
      PERS.FECHA_REGISTRO
      
    FROM 
    UAB_GET.T_PERSONA PERS
    INNER JOIN
    UAB_GET.TPAR_GENERO GENE
    ON PERS.ID_GENERO=GENE.ID_GENERO
    INNER JOIN 
    UAB_GET.TPAR_TIPO_PERSONA TIPE
    ON PERS.ID_TIPO_PERSONA= TIPE.ID_TIPO_PERSONA
    
    WHERE
    NVL(PERS.ID_PERSONA,0) = CASE WHEN NVL(I_ID_PERSONA,0) = 0 THEN
    NVL(PERS.ID_PERSONA,0) ELSE NVL(I_ID_PERSONA,0) END
    AND
    NVL(PERS.ID_TIPO_PERSONA,0) = CASE WHEN NVL(I_ID_TIPO_PERSONA,0) = 0 THEN
    NVL(PERS.ID_TIPO_PERSONA,0) ELSE NVL(I_ID_TIPO_PERSONA,0) END
    AND
    UPPER(TIPE.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_TIPO_PERSONA),' ') = ' ' THEN
    UPPER(TIPE.DESCRIPCION) ELSE '%'||UPPER(I_TIPO_PERSONA)||'%' END
    AND
    NVL(PERS.ID_GENERO,0) = CASE WHEN NVL(I_ID_GENERO,0) = 0 THEN
    NVL(PERS.ID_GENERO,0) ELSE NVL(I_ID_GENERO,0) END
    AND
    UPPER(GENE.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_GENERO),' ') = ' ' THEN
    UPPER(GENE.DESCRIPCION) ELSE '%'||UPPER(I_GENERO)||'%' END
    AND
    UPPER(PERS.NOMBRE) LIKE CASE WHEN NVL(TRIM(I_NOMBRE),' ') = ' ' THEN
    UPPER(PERS.NOMBRE) ELSE '%'||UPPER(I_NOMBRE)||'%' END
    AND
    UPPER(PERS.AP_PATERNO) LIKE CASE WHEN NVL(TRIM(I_AP_PATERNO),' ') = ' ' THEN
    UPPER(PERS.AP_PATERNO) ELSE '%'||UPPER(I_AP_PATERNO)||'%' END
    AND
    UPPER(PERS.AP_MATERNO) LIKE CASE WHEN NVL(TRIM(I_AP_MATERNO),' ') = ' ' THEN
    UPPER(PERS.AP_MATERNO) ELSE '%'||UPPER(I_AP_MATERNO)||'%' END
    AND
    UPPER(PERS.FECHA_NACIMIENTO) LIKE CASE WHEN NVL(TRIM(I_FECHA_NACIMIENTO),' ') = ' ' THEN
    UPPER(PERS.FECHA_NACIMIENTO) ELSE '%'||UPPER(I_FECHA_NACIMIENTO)||'%' END
    AND
    UPPER(PERS.DIRECCION) LIKE CASE WHEN NVL(TRIM(I_DIRECCION),' ') = ' ' THEN
    UPPER(PERS.DIRECCION) ELSE '%'||UPPER(I_DIRECCION)||'%' END
    AND
    UPPER(PERS.EMAIL) LIKE CASE WHEN NVL(TRIM(I_EMAIL),' ') = ' ' THEN
    UPPER(PERS.EMAIL) ELSE '%'||UPPER(I_EMAIL)||'%' END
    AND
    NVL(PERS.APP_ID_USUARIO,0) = CASE WHEN NVL(I_APP_ID_USUARIO,0) = 0 THEN
    NVL(PERS.APP_ID_USUARIO,0) ELSE NVL(I_APP_ID_USUARIO,0) END
    AND
    UPPER(PERS.FECHA_REGISTRO) LIKE CASE WHEN NVL(TRIM(I_FECHA_REGISTRO),' ') = ' ' THEN
    UPPER(PERS.FECHA_REGISTRO) ELSE '%'||UPPER(I_FECHA_REGISTRO)||'%' END
    
    AND PERS.AUD_ESTADO = 1;
    END;    
PROCEDURE P_LISTAR_DOCUMENTO( 
I_CREDENCIAL        IN VARCHAR2,
I_ID_DOCUMENTO      IN UAB_GET.T_DOCUMENTO.ID_DOCUMENTO%TYPE,
I_ID_PERSONA          IN UAB_GET.T_DOCUMENTO.ID_PERSONA%TYPE, 
I_ID_TIPO_DOCUMENTO   IN UAB_GET.T_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
I_TIPO_DOCUMENTO      IN UAB_GET.TPAR_TIPO_DOCUMENTO.DESCRIPCION%TYPE,
I_NUMERO_DOCUMENTO    IN UAB_GET.T_DOCUMENTO.NUMERO_DOCUMENTO%TYPE,
I_DESCRIPCION         IN UAB_GET.T_DOCUMENTO.DESCRIPCION%TYPE,
I_APP_ID_USUARIO      IN UAB_GET.T_DOCUMENTO.APP_ID_USUARIO%TYPE,
I_AUD_ESTADO          IN UAB_GET.T_DOCUMENTO.AUD_ESTADO%TYPE,
I_FECHA_REGISTRO      IN UAB_GET.T_DOCUMENTO.FECHA_REGISTRO%TYPE,

O_LISTAR_DOCUMENTO  OUT SYS_REFCURSOR
) AS
BEGIN

OPEN O_LISTAR_DOCUMENTO FOR
    SELECT 
      DOCU.ID_DOCUMENTO,
      DOCU.ID_PERSONA,
      DOCU.ID_TIPO_DOCUMENTO,
      TIDO.DESCRIPCION TIPO_DOCUMENTO,
      DOCU.NUMERO_DOCUMENTO,
      DOCU.DESCRIPCION,
      DOCU.APP_ID_USUARIO,
      DOCU.AUD_ESTADO,
      DOCU.AUD_USUARIO,
      DOCU.AUD_FECHA,
      DOCU.FECHA_REGISTRO
    FROM UAB_GET.T_DOCUMENTO DOCU
    INNER JOIN UAB_GET.TPAR_TIPO_DOCUMENTO TIDO
    ON DOCU.ID_TIPO_DOCUMENTO=TIDO.ID_TIPO_DOCUMENTO
    
    WHERE
    NVL(DOCU.ID_DOCUMENTO,0) = CASE WHEN NVL(I_ID_DOCUMENTO,0) = 0 THEN
    NVL(DOCU.ID_DOCUMENTO,0) ELSE NVL(I_ID_DOCUMENTO,0) END
    AND
    NVL(DOCU.ID_PERSONA,0) = CASE WHEN NVL(I_ID_PERSONA,0) = 0 THEN
    NVL(DOCU.ID_PERSONA,0) ELSE NVL(I_ID_PERSONA,0) END
    AND
    NVL(DOCU.ID_TIPO_DOCUMENTO,0) = CASE WHEN NVL(I_ID_TIPO_DOCUMENTO,0) = 0 THEN
    NVL(DOCU.ID_TIPO_DOCUMENTO,0) ELSE NVL(I_ID_TIPO_DOCUMENTO,0) END
    AND
    UPPER(TIDO.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_TIPO_DOCUMENTO),' ') = ' ' THEN
    UPPER(TIDO.DESCRIPCION) ELSE '%'||UPPER(I_TIPO_DOCUMENTO)||'%' END
    AND
    UPPER(DOCU.NUMERO_DOCUMENTO) LIKE CASE WHEN NVL(TRIM(I_NUMERO_DOCUMENTO),' ') = ' ' THEN
    UPPER(DOCU.NUMERO_DOCUMENTO) ELSE '%'||UPPER(I_NUMERO_DOCUMENTO)||'%' END
    AND
    UPPER(DOCU.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_DESCRIPCION),' ') = ' ' THEN
    UPPER(DOCU.DESCRIPCION) ELSE '%'||UPPER(I_DESCRIPCION)||'%' END
    AND
    NVL(DOCU.APP_ID_USUARIO,0) = CASE WHEN NVL(I_APP_ID_USUARIO,0) = 0 THEN
    NVL(DOCU.APP_ID_USUARIO,0) ELSE NVL(I_APP_ID_USUARIO,0) END
    AND
    UPPER(DOCU.FECHA_REGISTRO) LIKE CASE WHEN NVL(TRIM(I_FECHA_REGISTRO),' ') = ' ' THEN
    UPPER(DOCU.FECHA_REGISTRO) ELSE '%'||UPPER(I_FECHA_REGISTRO)||'%' END

    AND DOCU.AUD_ESTADO = 1;
    --AND PROC.AUD_ESTADO = I_AUD_ESTADO;
    END;
    
 PROCEDURE P_LISTAR_BOLETO_COMPLETO(
 I_CREDENCIAL   IN VARCHAR2,
    I_ID_BOLETO          IN UAB_GET.T_BOLETO.ID_BOLETO%TYPE,
    I_ID_RUTA            IN UAB_GET.T_BOLETO.ID_RUTA%TYPE,   
    I_ID_USUARIO         IN UAB_GET.T_BOLETO.ID_USUARIO%TYPE,
    I_ID_SUCURSAL        IN UAB_GET.T_BOLETO.ID_SUCURSAL%TYPE,
    I_FECHA_REGISTRO        IN UAB_GET.T_BOLETO.FECHA_REGISTRO%TYPE,
    I_AUD_ESTADO         IN UAB_GET.T_BOLETO.AUD_ESTADO%TYPE,
    I_ID_DETALLE_BOLETO  IN UAB_GET.T_DETALLE_BOLETO.ID_DETALLE_BOLETO%TYPE,
    I_ID_ASIENTO         IN UAB_GET.T_DETALLE_BOLETO.ID_ASIENTO%TYPE,
    I_ID_PERSONA         IN UAB_GET.T_DETALLE_BOLETO.ID_PERSONA%TYPE,
    I_ID_TIPO_ASIENTO    IN UAB_GET.T_ASIENTO.ID_TIPO_ASIENTO%TYPE,
    I_NUMERO             IN UAB_GET.T_ASIENTO.NUMERO%TYPE,
    I_TIPO_ASIENTO        IN UAB_GET.TPAR_TIPO_ASIENTO.DESCRIPCION%TYPE,
 O_LISTAR_BOLETO_COMPLETO  OUT SYS_REFCURSOR        
 )IS
 BEGIN
    OPEN O_LISTAR_BOLETO_COMPLETO FOR

    SELECT BOLE.ID_BOLETO,
           BOLE.ID_RUTA,
           BOLE.ID_USUARIO,
           BOLE.ID_SUCURSAL,
           BOLE.FECHA_REGISTRO,
           BOLE.AUD_ESTADO,
           DEBO.ID_DETALLE_BOLETO,
           DEBO.ID_ASIENTO,
           DEBO.ID_PERSONA,
           ASIE.ID_TIPO_ASIENTO,
           ASIE.NUMERO,
           TIAS.DESCRIPCION TIPO_ASIENTO
      FROM UAB_GET.T_DETALLE_BOLETO DEBO
           JOIN UAB_GET.T_BOLETO BOLE
              ON (DEBO.ID_BOLETO = BOLE.ID_BOLETO)
           JOIN UAB_GET.T_ASIENTO ASIE
              ON (DEBO.ID_ASIENTO = ASIE.ID_ASIENTO)
           JOIN UAB_GET.TPAR_TIPO_ASIENTO TIAS
              ON (ASIE.ID_TIPO_ASIENTO = TIAS.ID_TIPO_ASIENTO)
              
    WHERE 
     NVL(BOLE.ID_BOLETO,0) = CASE WHEN NVL(I_ID_BOLETO,0) = 0 THEN
     NVL(BOLE.ID_BOLETO,0) ELSE NVL(I_ID_BOLETO,0) END
    AND
    NVL(BOLE.ID_RUTA,0) = CASE WHEN NVL(I_ID_RUTA,0) = 0 THEN
     NVL(BOLE.ID_RUTA,0) ELSE NVL(I_ID_RUTA,0) END
    AND
    NVL(BOLE.ID_USUARIO,0) = CASE WHEN NVL(I_ID_USUARIO,0) = 0 THEN
     NVL(BOLE.ID_USUARIO,0) ELSE NVL(I_ID_USUARIO,0) END
    AND
    NVL(BOLE.ID_SUCURSAL,0) = CASE WHEN NVL(I_ID_SUCURSAL,0) = 0 THEN
     NVL(BOLE.ID_SUCURSAL,0) ELSE NVL(I_ID_SUCURSAL,0) END
    AND
    UPPER(BOLE.FECHA_REGISTRO) LIKE CASE WHEN NVL(TRIM(I_FECHA_REGISTRO),' ') = ' ' THEN
    UPPER(BOLE.FECHA_REGISTRO) ELSE '%'||UPPER(I_FECHA_REGISTRO)||'%' END
    AND
    NVL(DEBO.ID_DETALLE_BOLETO,0) = CASE WHEN NVL(I_ID_DETALLE_BOLETO,0) = 0 THEN
     NVL(DEBO.ID_DETALLE_BOLETO,0) ELSE NVL(I_ID_DETALLE_BOLETO,0) END
    AND
    NVL(DEBO.ID_ASIENTO,0) = CASE WHEN NVL(I_ID_ASIENTO,0) = 0 THEN
     NVL(DEBO.ID_ASIENTO,0) ELSE NVL(I_ID_ASIENTO,0) END
    AND
    NVL(DEBO.ID_PERSONA,0) = CASE WHEN NVL(I_ID_PERSONA,0) = 0 THEN
     NVL(DEBO.ID_PERSONA,0) ELSE NVL(I_ID_PERSONA,0) END
    AND
    NVL(ASIE.ID_TIPO_ASIENTO,0) = CASE WHEN NVL(I_ID_TIPO_ASIENTO,0) = 0 THEN
     NVL(ASIE.ID_TIPO_ASIENTO,0) ELSE NVL(I_ID_TIPO_ASIENTO,0) END
    AND
    UPPER(ASIE.NUMERO) LIKE CASE WHEN NVL(TRIM(I_NUMERO),' ') = ' ' THEN
    UPPER(ASIE.NUMERO) ELSE '%'||UPPER(I_NUMERO)||'%' END
    AND
    UPPER(TIAS.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_TIPO_ASIENTO),' ') = ' ' THEN
    UPPER(TIAS.DESCRIPCION) ELSE '%'||UPPER(I_TIPO_ASIENTO)||'%' END  
    AND
     ASIE.AUD_ESTADO = 1 ;
 END;
      
PROCEDURE P_LISTAR_ASIENTO_COMPLETO(
 I_CREDENCIAL   IN VARCHAR2,
    I_ID_ASIENTO_RUTA      IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO_RUTA%TYPE,
   I_ID_RUTA               IN UAB_GET.T_ASIENTO_RUTA.ID_RUTA%TYPE,
   I_ID_ESTADO_ASIENTO     IN UAB_GET.T_ASIENTO_RUTA.ID_ESTADO_ASIENTO%TYPE,
   I_ASIENTO_RUTA          IN UAB_GET.T_ASIENTO_RUTA.DESCRIPCION%TYPE,
   I_AUD_ESTADO            IN UAB_GET.T_ASIENTO_RUTA.AUD_ESTADO%TYPE,
   I_FECHA_REGISTRO        IN UAB_GET.T_ASIENTO_RUTA.FECHA_REGISTRO%TYPE,
   I_ID_ASIENTO            IN UAB_GET.T_ASIENTO_RUTA.ID_ASIENTO%TYPE,
   I_ESTADO_ASIENTO        IN UAB_GET.TPAR_ESTADO_ASIENTO.DESCRIPCION%TYPE,
   I_NUMERO                IN UAB_GET.T_ASIENTO.NUMERO%TYPE,
   I_TIPO_ASIENTO          IN UAB_GET.TPAR_TIPO_ASIENTO.DESCRIPCION%TYPE,
   I_ID_TIPO_ASIENTO       IN UAB_GET.T_ASIENTO.ID_TIPO_ASIENTO%TYPE,
 O_LISTAR_ASIENTO_COMPLETO  OUT SYS_REFCURSOR          
 )IS
 BEGIN
    OPEN O_LISTAR_ASIENTO_COMPLETO FOR

        SELECT 
           ASRU.ID_ASIENTO_RUTA,
           ASRU.ID_RUTA,
           ASRU.ID_ESTADO_ASIENTO,
           ASRU.DESCRIPCION ASIENTO_RUTA,
           ASRU.AUD_ESTADO,
           ASRU.FECHA_REGISTRO,
           ASRU.ID_ASIENTO,
           ESAS.DESCRIPCION ESTADO_ASIENTO,
           ASIE.NUMERO,
           TIAS.DESCRIPCION TIPO_ASIENTO,
           ASIE.ID_TIPO_ASIENTO
           
      FROM UAB_GET.T_ASIENTO_RUTA ASRU
           JOIN UAB_GET.T_ASIENTO ASIE
              ON (ASRU.ID_ASIENTO = ASIE.ID_ASIENTO)
           JOIN UAB_GET.TPAR_ESTADO_ASIENTO ESAS
              ON (ASRU.ID_ESTADO_ASIENTO = ESAS.ID_ESTADO_ASIENTO)
           JOIN UAB_GET.TPAR_TIPO_ASIENTO TIAS
              ON (ASIE.ID_TIPO_ASIENTO = TIAS.ID_TIPO_ASIENTO)
                    
    WHERE 
     NVL(ASRU.ID_ASIENTO_RUTA,0) = CASE WHEN NVL(I_ID_ASIENTO_RUTA,0) = 0 THEN
     NVL(ASRU.ID_ASIENTO_RUTA,0) ELSE NVL(I_ID_ASIENTO_RUTA,0) END
    AND
    NVL(ASRU.ID_RUTA,0) = CASE WHEN NVL(I_ID_RUTA,0) = 0 THEN
     NVL(ASRU.ID_RUTA,0) ELSE NVL(I_ID_RUTA,0) END
    AND
    NVL(ASRU.ID_ESTADO_ASIENTO,0) = CASE WHEN NVL(I_ID_ESTADO_ASIENTO,0) = 0 THEN
     NVL(ASRU.ID_ESTADO_ASIENTO,0) ELSE NVL(I_ID_ESTADO_ASIENTO,0) END
    AND
     UPPER(ASRU.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_ASIENTO_RUTA),' ') = ' ' THEN
    UPPER(ASRU.DESCRIPCION) ELSE '%'||UPPER(I_ASIENTO_RUTA)||'%' END
    AND
    UPPER(ASRU.FECHA_REGISTRO) LIKE CASE WHEN NVL(TRIM(I_FECHA_REGISTRO),' ') = ' ' THEN
    UPPER(ASRU.FECHA_REGISTRO) ELSE '%'||UPPER(I_FECHA_REGISTRO)||'%' END
    AND
    NVL(ASRU.ID_ASIENTO,0) = CASE WHEN NVL(I_ID_ASIENTO,0) = 0 THEN
     NVL(ASRU.ID_ASIENTO,0) ELSE NVL(I_ID_ASIENTO,0) END
    AND
     UPPER(ESAS.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_ESTADO_ASIENTO),' ') = ' ' THEN
    UPPER(ESAS.DESCRIPCION) ELSE '%'||UPPER(I_ESTADO_ASIENTO)||'%' END
    AND
     UPPER(ASIE.NUMERO) LIKE CASE WHEN NVL(TRIM(I_NUMERO),' ') = ' ' THEN
    UPPER(ASIE.NUMERO) ELSE '%'||UPPER(I_NUMERO)||'%' END
    AND
    UPPER(TIAS.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_TIPO_ASIENTO),' ') = ' ' THEN
    UPPER(TIAS.DESCRIPCION) ELSE '%'||UPPER(I_TIPO_ASIENTO)||'%' END
    AND
    NVL(ASIE.ID_TIPO_ASIENTO,0) = CASE WHEN NVL(I_ID_TIPO_ASIENTO,0) = 0 THEN
     NVL(ASIE.ID_TIPO_ASIENTO,0) ELSE NVL(I_ID_TIPO_ASIENTO,0) END
     AND
     ASRU.AUD_ESTADO = 1 ;
 END;  
 
 PROCEDURE P_LISTAR_RUTA_COMPLETO(
 I_CREDENCIAL   IN VARCHAR2,
I_ID_RUTA            IN UAB_GET.T_RUTA.ID_RUTA%TYPE,
I_ID_CIUDAD_ORIGEN   IN UAB_GET.T_RUTA.ID_CIUDAD_ORIGEN%TYPE,
I_ID_CIUDAD_DESTINO  IN UAB_GET.T_RUTA.ID_CIUDAD_DESTINO%TYPE,
I_ID_FLOTA           IN UAB_GET.T_RUTA.ID_FLOTA%TYPE,
I_ID_HORARIO         IN UAB_GET.T_RUTA.ID_HORARIO%TYPE,
I_ID_PRECIO          IN UAB_GET.T_RUTA.ID_PRECIO%TYPE,
I_ID_CONDUCTOR       IN UAB_GET.T_RUTA.ID_CONDUCTOR%TYPE,

I_PRECIO             IN UAB_GET.TPAR_PRECIO.PRECIO%TYPE,
I_HORA               IN UAB_GET.T_HORARIO.HORA%TYPE,
I_ID_TIPO_FLOTA      IN UAB_GET.T_FLOTA.ID_TIPO_FLOTA%TYPE,
I_PLACA              IN UAB_GET.T_FLOTA.PLACA%TYPE,
I_MODELO             IN UAB_GET.T_FLOTA.MODELO%TYPE,
I_NRO_ASIENTOS       IN UAB_GET.T_FLOTA.NRO_ASIENTOS%TYPE,
I_TIPO_FLOTA         IN UAB_GET.TPAR_TIPO_FLOTA.DESCRIPCION%TYPE,
I_AUD_ESTADO         IN UAB_GET.T_RUTA.AUD_ESTADO%TYPE,
 O_LISTAR_RUTA_COMPLETO  OUT SYS_REFCURSOR          
 )IS
 BEGIN
    OPEN O_LISTAR_RUTA_COMPLETO FOR
        SELECT RUTA.ID_RUTA,
               RUTA.ID_CIUDAD_ORIGEN,
               RUTA.ID_CIUDAD_DESTINO,
               RUTA.ID_FLOTA,
               RUTA.ID_HORARIO,
               RUTA.ID_PRECIO,
               RUTA.ID_CONDUCTOR,
               
               PREC.PRECIO,
               HORA.HORA,
               FLOT.ID_TIPO_FLOTA,
               FLOT.PLACA,
               FLOT.MODELO,
               FLOT.NRO_ASIENTOS,
               TIFL.DESCRIPCION TIPO_FLOTA,
               RUTA.AUD_ESTADO
          FROM UAB_GET.T_RUTA RUTA
               JOIN UAB_GET.T_HORARIO HORA
                  ON (RUTA.ID_HORARIO = HORA.ID_HORARIO)
               JOIN UAB_GET.TPAR_PRECIO PREC
                  ON (RUTA.ID_PRECIO = PREC.ID_PRECIO)
               JOIN UAB_GET.T_FLOTA FLOT
                  ON (RUTA.ID_FLOTA = FLOT.ID_FLOTA)
               JOIN UAB_GET.TPAR_TIPO_FLOTA TIFL
                  ON (FLOT.ID_TIPO_FLOTA = TIFL.ID_TIPO_FLOTA)


                    
    WHERE 
     NVL(RUTA.ID_RUTA,0) = CASE WHEN NVL(I_ID_RUTA,0) = 0 THEN
     NVL(RUTA.ID_RUTA,0) ELSE NVL(I_ID_RUTA,0) END
    AND 
    NVL(RUTA.ID_CIUDAD_ORIGEN,0) = CASE WHEN NVL(I_ID_CIUDAD_ORIGEN,0) = 0 THEN
     NVL(RUTA.ID_CIUDAD_ORIGEN,0) ELSE NVL(I_ID_CIUDAD_ORIGEN,0) END
    AND
    NVL(RUTA.ID_CIUDAD_DESTINO,0) = CASE WHEN NVL(I_ID_CIUDAD_DESTINO,0) = 0 THEN
     NVL(RUTA.ID_CIUDAD_DESTINO,0) ELSE NVL(I_ID_CIUDAD_DESTINO,0) END
    AND
    NVL(RUTA.ID_FLOTA,0) = CASE WHEN NVL(I_ID_FLOTA,0) = 0 THEN
     NVL(RUTA.ID_FLOTA,0) ELSE NVL(I_ID_FLOTA,0) END
    AND
    NVL(RUTA.ID_HORARIO,0) = CASE WHEN NVL(I_ID_HORARIO,0) = 0 THEN
     NVL(RUTA.ID_HORARIO,0) ELSE NVL(I_ID_HORARIO,0) END
    AND
    NVL(RUTA.ID_PRECIO,0) = CASE WHEN NVL(I_ID_PRECIO,0) = 0 THEN
     NVL(RUTA.ID_PRECIO,0) ELSE NVL(I_ID_PRECIO,0) END
    AND 
    NVL(RUTA.ID_CONDUCTOR,0) = CASE WHEN NVL(I_ID_CONDUCTOR,0) = 0 THEN
     NVL(RUTA.ID_CONDUCTOR,0) ELSE NVL(I_ID_CONDUCTOR,0) END
    AND
    UPPER(PREC.PRECIO) LIKE CASE WHEN NVL(TRIM(I_PRECIO),' ') = ' ' THEN
    UPPER(PREC.PRECIO) ELSE '%'||UPPER(I_PRECIO)||'%' END
    AND 
    UPPER(PREC.PRECIO) LIKE CASE WHEN NVL(TRIM(I_PRECIO),' ') = ' ' THEN
    UPPER(PREC.PRECIO) ELSE '%'||UPPER(I_PRECIO)||'%' END
    AND
     UPPER(HORA.HORA) LIKE CASE WHEN NVL(TRIM(I_HORA),' ') = ' ' THEN
    UPPER(HORA.HORA) ELSE '%'||UPPER(I_HORA)||'%' END
    AND
    NVL(FLOT.ID_TIPO_FLOTA,0) = CASE WHEN NVL(I_ID_TIPO_FLOTA,0) = 0 THEN
     NVL(FLOT.ID_TIPO_FLOTA,0) ELSE NVL(I_ID_TIPO_FLOTA,0) END
     AND
     UPPER(FLOT.PLACA) LIKE CASE WHEN NVL(TRIM(I_PLACA),' ') = ' ' THEN
    UPPER(FLOT.PLACA) ELSE '%'||UPPER(I_PLACA)||'%' END
    AND
    UPPER(FLOT.MODELO) LIKE CASE WHEN NVL(TRIM(I_MODELO),' ') = ' ' THEN
    UPPER(FLOT.MODELO) ELSE '%'||UPPER(I_MODELO)||'%' END
    AND
    NVL(FLOT.NRO_ASIENTOS,0) = CASE WHEN NVL(I_NRO_ASIENTOS,0) = 0 THEN
     NVL(FLOT.NRO_ASIENTOS,0) ELSE NVL(I_NRO_ASIENTOS,0) END
     AND
     UPPER(TIFL.DESCRIPCION) LIKE CASE WHEN NVL(TRIM(I_TIPO_FLOTA),' ') = ' ' THEN
    UPPER(TIFL.DESCRIPCION) ELSE '%'||UPPER(I_TIPO_FLOTA)||'%' END
    AND
     RUTA.AUD_ESTADO = 1 ;
 END; 
 PROCEDURE P_LISTAR_CIUDAD ( 
I_CREDENCIAL        IN  VARCHAR2,
I_ID_CIUDAD         IN UAB_GET.T_CIUDAD.ID_CIUDAD%TYPE,
I_CIUDAD            IN UAB_GET.T_CIUDAD.NOMBRE%TYPE, 
I_AUD_ESTADO        IN UAB_GET.T_CIUDAD.AUD_ESTADO%TYPE,
O_LISTAR_CIUDAD  OUT SYS_REFCURSOR
) AS
BEGIN

OPEN O_LISTAR_CIUDAD FOR
    SELECT 
        CIUD.ID_CIUDAD, 
        CIUD.NOMBRE CIUDAD, 
        CIUD.AUD_ESTADO
        
    FROM UAB_GET.T_CIUDAD CIUD

    WHERE
    NVL(CIUD.ID_CIUDAD,0) = CASE WHEN NVL(I_ID_CIUDAD,0) = 0 THEN
    NVL(CIUD.ID_CIUDAD,0) ELSE NVL(I_ID_CIUDAD,0) END
    AND
    UPPER(CIUD.NOMBRE) LIKE CASE WHEN NVL(TRIM(I_CIUDAD),' ') = ' ' THEN
    UPPER(CIUD.NOMBRE) ELSE '%'||UPPER(I_CIUDAD)||'%' END
    AND CIUD.AUD_ESTADO = 1
    ORDER BY CIUD.NOMBRE ASC;
    END;
        
END PGET_LISTADOS;
/

GRANT EXECUTE ON UAB_GET.PGET_GESTION TO APP_GESTION_UAB
/

GRANT EXECUTE ON UAB_GET.PGET_LISTADOS TO APP_GESTION_UAB
/
